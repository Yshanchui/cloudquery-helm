{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "storageClass": {
                    "type": "string",
                    "description": "Global StorageClass for Persistent Volume(s)",
                    "default": ""
                }
            }
        },
        "kubeVersion": {
            "type": "string",
            "description": "Override Kubernetes version",
            "default": ""
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override common.names.name",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override common.names.fullname",
            "default": ""
        },
        "namespaceOverride": {
            "type": "string",
            "description": "String to fully override common.names.namespace",
            "default": ""
        },
        "commonLabels": {
            "type": "object",
            "description": "Labels to add to all deployed objects",
            "default": {}
        },
        "commonAnnotations": {
            "type": "object",
            "description": "Annotations to add to all deployed objects",
            "default": {}
        },
        "clusterDomain": {
            "type": "string",
            "description": "Kubernetes cluster domain name",
            "default": "cluster.local"
        },
        "extraDeploy": {
            "type": "array",
            "description": "Array of extra objects to deploy with the release",
            "default": [],
            "items": {}
        },
        "diagnosticMode": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable diagnostic mode (all probes will be disabled and the command will be overridden)",
                    "default": false
                },
                "command": {
                    "type": "array",
                    "description": "Command to override all containers in the deployment",
                    "default": [
                        "sleep"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "args": {
                    "type": "array",
                    "description": "Args to override all containers in the deployment",
                    "default": [
                        "infinity"
                    ],
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "image": {
            "type": "object",
            "properties": {
                "registry": {
                    "type": "string",
                    "description": "ClickHouse image registry",
                    "default": "docker.io"
                },
                "repository": {
                    "type": "string",
                    "description": "ClickHouse image repository",
                    "default": "bitnami/clickhouse"
                },
                "tag": {
                    "type": "string",
                    "description": "ClickHouse image tag (immutable tags are recommended)",
                    "default": "23.8.2-debian-11-r0"
                },
                "digest": {
                    "type": "string",
                    "description": "ClickHouse image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                    "default": ""
                },
                "pullPolicy": {
                    "type": "string",
                    "description": "ClickHouse image pull policy",
                    "default": "IfNotPresent"
                },
                "pullSecrets": {
                    "type": "array",
                    "description": "ClickHouse image pull secrets",
                    "default": [],
                    "items": {}
                },
                "debug": {
                    "type": "boolean",
                    "description": "Enable ClickHouse image debug mode",
                    "default": false
                }
            }
        },
        "shards": {
            "type": "number",
            "description": "Number of ClickHouse shards to deploy",
            "default": 2
        },
        "replicaCount": {
            "type": "number",
            "description": "Number of ClickHouse replicas per shard to deploy",
            "default": 3
        },
        "distributeReplicasByZone": {
            "type": "boolean",
            "description": "Schedules replicas of the same shard to different availability zones",
            "default": false
        },
        "containerPorts": {
            "type": "object",
            "properties": {
                "http": {
                    "type": "number",
                    "description": "ClickHouse HTTP container port",
                    "default": 8123
                },
                "https": {
                    "type": "number",
                    "description": "ClickHouse HTTPS container port",
                    "default": 8443
                },
                "tcp": {
                    "type": "number",
                    "description": "ClickHouse TCP container port",
                    "default": 9000
                },
                "tcpSecure": {
                    "type": "number",
                    "description": "ClickHouse TCP (secure) container port",
                    "default": 9440
                },
                "keeper": {
                    "type": "number",
                    "description": "ClickHouse keeper TCP container port",
                    "default": 2181
                },
                "keeperSecure": {
                    "type": "number",
                    "description": "ClickHouse keeper TCP (secure) container port",
                    "default": 3181
                },
                "keeperInter": {
                    "type": "number",
                    "description": "ClickHouse keeper interserver TCP container port",
                    "default": 9444
                },
                "mysql": {
                    "type": "number",
                    "description": "ClickHouse MySQL container port",
                    "default": 9004
                },
                "postgresql": {
                    "type": "number",
                    "description": "ClickHouse PostgreSQL container port",
                    "default": 9005
                },
                "interserver": {
                    "type": "number",
                    "description": "ClickHouse Interserver container port",
                    "default": 9009
                },
                "metrics": {
                    "type": "number",
                    "description": "ClickHouse metrics container port",
                    "default": 8001
                }
            }
        },
        "livenessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable livenessProbe on ClickHouse containers",
                    "default": true
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for livenessProbe",
                    "default": 10
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for livenessProbe",
                    "default": 10
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for livenessProbe",
                    "default": 1
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for livenessProbe",
                    "default": 3
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for livenessProbe",
                    "default": 1
                }
            }
        },
        "readinessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable readinessProbe on ClickHouse containers",
                    "default": true
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for readinessProbe",
                    "default": 10
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for readinessProbe",
                    "default": 10
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for readinessProbe",
                    "default": 1
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for readinessProbe",
                    "default": 3
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for readinessProbe",
                    "default": 1
                }
            }
        },
        "startupProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable startupProbe on ClickHouse containers",
                    "default": false
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for startupProbe",
                    "default": 10
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for startupProbe",
                    "default": 10
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for startupProbe",
                    "default": 1
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for startupProbe",
                    "default": 3
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for startupProbe",
                    "default": 1
                }
            }
        },
        "customLivenessProbe": {
            "type": "object",
            "description": "Custom livenessProbe that overrides the default one",
            "default": {}
        },
        "customReadinessProbe": {
            "type": "object",
            "description": "Custom readinessProbe that overrides the default one",
            "default": {}
        },
        "customStartupProbe": {
            "type": "object",
            "description": "Custom startupProbe that overrides the default one",
            "default": {}
        },
        "resources": {
            "type": "object",
            "properties": {
                "limits": {
                    "type": "object",
                    "description": "The resources limits for the ClickHouse containers",
                    "default": {}
                },
                "requests": {
                    "type": "object",
                    "description": "The requested resources for the ClickHouse containers",
                    "default": {}
                }
            }
        },
        "podSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled ClickHouse pods' Security Context",
                    "default": true
                },
                "fsGroup": {
                    "type": "number",
                    "description": "Set ClickHouse pod's Security Context fsGroup",
                    "default": 1001
                },
                "seccompProfile": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Set ClickHouse container's Security Context seccomp profile",
                            "default": "RuntimeDefault"
                        }
                    }
                }
            }
        },
        "containerSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled ClickHouse containers' Security Context",
                    "default": true
                },
                "runAsUser": {
                    "type": "number",
                    "description": "Set ClickHouse containers' Security Context runAsUser",
                    "default": 1001
                },
                "runAsNonRoot": {
                    "type": "boolean",
                    "description": "Set ClickHouse containers' Security Context runAsNonRoot",
                    "default": true
                },
                "allowPrivilegeEscalation": {
                    "type": "boolean",
                    "description": "Set ClickHouse container's privilege escalation",
                    "default": false
                },
                "capabilities": {
                    "type": "object",
                    "properties": {
                        "drop": {
                            "type": "array",
                            "description": "Set ClickHouse container's Security Context runAsNonRoot",
                            "default": [
                                "ALL"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "auth": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string",
                    "description": "ClickHouse Admin username",
                    "default": "default"
                },
                "password": {
                    "type": "string",
                    "description": "ClickHouse Admin password",
                    "default": ""
                },
                "existingSecret": {
                    "type": "string",
                    "description": "Name of a secret containing the Admin password",
                    "default": ""
                },
                "existingSecretKey": {
                    "type": "string",
                    "description": "Name of the key inside the existing secret",
                    "default": ""
                }
            }
        },
        "logLevel": {
            "type": "string",
            "description": "Logging level",
            "default": "information"
        },
        "keeper": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Deploy ClickHouse keeper. Support is experimental.",
                    "default": false
                }
            }
        },
        "defaultConfigurationOverrides": {
            "type": "string",
            "description": "Default configuration overrides (evaluated as a template)",
            "default": "<clickhouse>\n  <!-- Macros -->\n  <macros>\n    <shard from_env=\"CLICKHOUSE_SHARD_ID\"></shard>\n    <replica from_env=\"CLICKHOUSE_REPLICA_ID\"></replica>\n    <layer>{{ include \"common.names.fullname\" . }}</layer>\n  </macros>\n  <!-- Log Level -->\n  <logger>\n    <level>{{ .Values.logLevel }}</level>\n  </logger>\n  {{- if or (ne (int .Values.shards) 1) (ne (int .Values.replicaCount) 1)}}\n  <!-- Cluster configuration - Any update of the shards and replicas requires helm upgrade -->\n  <remote_servers>\n    <default>\n      {{- $shards := $.Values.shards | int }}\n      {{- range $shard, $e := until $shards }}\n      <shard>\n          {{- $replicas := $.Values.replicaCount | int }}\n          {{- range $i, $_e := until $replicas }}\n          <replica>\n              <host>{{ printf \"%s-shard%d-%d.%s.%s.svc.%s\" (include \"common.names.fullname\" $ ) $shard $i (include \"clickhouse.headlessServiceName\" $) (include \"common.names.namespace\" $) $.Values.clusterDomain }}</host>\n              <port>{{ $.Values.service.ports.tcp }}</port>\n              <user from_env=\"CLICKHOUSE_ADMIN_USER\"></user>\n              <password from_env=\"CLICKHOUSE_ADMIN_PASSWORD\"></password>\n          </replica>\n          {{- end }}\n      </shard>\n      {{- end }}\n    </default>\n  </remote_servers>\n  {{- end }}\n  {{- if .Values.keeper.enabled }}\n  <!-- keeper configuration -->\n  <keeper_server>\n    {{/*ClickHouse keeper configuration using the helm chart */}}\n    <tcp_port>{{ $.Values.containerPorts.keeper }}</tcp_port>\n    {{- if .Values.tls.enabled }}\n    <tcp_port_secure>{{ $.Values.containerPorts.keeperSecure }}</tcp_port_secure>\n    {{- end }}\n    <server_id from_env=\"KEEPER_SERVER_ID\"></server_id>\n    <log_storage_path>/bitnami/clickhouse/keeper/coordination/log</log_storage_path>\n    <snapshot_storage_path>/bitnami/clickhouse/keeper/coordination/snapshots</snapshot_storage_path>\n\n    <coordination_settings>\n        <operation_timeout_ms>10000</operation_timeout_ms>\n        <session_timeout_ms>30000</session_timeout_ms>\n        <raft_logs_level>trace</raft_logs_level>\n    </coordination_settings>\n\n    <raft_configuration>\n    {{- $nodes := .Values.replicaCount | int }}\n    {{- range $node, $e := until $nodes }}\n    <server>\n      <id>{{ $node | int }}</id>\n      <hostname from_env=\"{{ printf \"KEEPER_NODE_%d\" $node }}\"></hostname>\n      <port>{{ $.Values.service.ports.keeperInter }}</port>\n    </server>\n    {{- end }}\n    </raft_configuration>\n  </keeper_server>\n  {{- end }}\n  {{- if or .Values.keeper.enabled .Values.zookeeper.enabled .Values.externalZookeeper.servers }}\n  <!-- Zookeeper configuration -->\n  <zookeeper>\n    {{- if or .Values.keeper.enabled }}\n    {{- $nodes := .Values.replicaCount | int }}\n    {{- range $node, $e := until $nodes }}\n    <node>\n      <host from_env=\"{{ printf \"KEEPER_NODE_%d\" $node }}\"></host>\n      <port>{{ $.Values.service.ports.keeper }}</port>\n    </node>\n    {{- end }}\n    {{- else if .Values.zookeeper.enabled }}\n    {{/* Zookeeper configuration using the helm chart */}}\n    {{- $nodes := .Values.zookeeper.replicaCount | int }}\n    {{- range $node, $e := until $nodes }}\n    <node>\n      <host from_env=\"{{ printf \"KEEPER_NODE_%d\" $node }}\"></host>\n      <port>{{ $.Values.zookeeper.service.ports.client }}</port>\n    </node>\n    {{- end }}\n    {{- else if .Values.externalZookeeper.servers }}\n    {{/* Zookeeper configuration using an external instance */}}\n    {{- range $node :=.Values.externalZookeeper.servers }}\n    <node>\n      <host>{{ $node }}</host>\n      <port>{{ $.Values.externalZookeeper.port }}</port>\n    </node>\n    {{- end }}\n    {{- end }}\n  </zookeeper>\n  {{- end }}\n  {{- if .Values.tls.enabled }}\n  <!-- TLS configuration -->\n  <tcp_port_secure from_env=\"CLICKHOUSE_TCP_SECURE_PORT\"></tcp_port_secure>\n  <https_port from_env=\"CLICKHOUSE_HTTPS_PORT\"></https_port>\n  <openSSL>\n      <server>\n          {{- $certFileName := default \"tls.crt\" .Values.tls.certFilename }}\n          {{- $keyFileName := default \"tls.key\" .Values.tls.certKeyFilename }}\n          <certificateFile>/bitnami/clickhouse/certs/{{$certFileName}}</certificateFile>\n          <privateKeyFile>/bitnami/clickhouse/certs/{{$keyFileName}}</privateKeyFile>\n          <verificationMode>none</verificationMode>\n          <cacheSessions>true</cacheSessions>\n          <disableProtocols>sslv2,sslv3</disableProtocols>\n          <preferServerCiphers>true</preferServerCiphers>\n          {{- if or .Values.tls.autoGenerated .Values.tls.certCAFilename }}\n          {{- $caFileName := default \"ca.crt\" .Values.tls.certCAFilename }}\n          <caConfig>/bitnami/clickhouse/certs/{{$caFileName}}</caConfig>\n          {{- else }}\n          <loadDefaultCAFile>true</loadDefaultCAFile>\n          {{- end }}\n      </server>\n      <client>\n          <loadDefaultCAFile>true</loadDefaultCAFile>\n          <cacheSessions>true</cacheSessions>\n          <disableProtocols>sslv2,sslv3</disableProtocols>\n          <preferServerCiphers>true</preferServerCiphers>\n          <verificationMode>none</verificationMode>\n          <invalidCertificateHandler>\n              <name>AcceptCertificateHandler</name>\n          </invalidCertificateHandler>\n      </client>\n  </openSSL>\n  {{- end }}\n  {{- if .Values.metrics.enabled }}\n   <!-- Prometheus metrics -->\n   <prometheus>\n      <endpoint>/metrics</endpoint>\n      <port from_env=\"CLICKHOUSE_METRICS_PORT\"></port>\n      <metrics>true</metrics>\n      <events>true</events>\n      <asynchronous_metrics>true</asynchronous_metrics>\n  </prometheus>\n  {{- end }}\n</clickhouse>\n"
        },
        "existingOverridesConfigmap": {
            "type": "string",
            "description": "The name of an existing ConfigMap with your custom configuration for ClickHouse",
            "default": ""
        },
        "extraOverrides": {
            "type": "string",
            "description": "Extra configuration overrides (evaluated as a template) apart from the default",
            "default": ""
        },
        "extraOverridesConfigmap": {
            "type": "string",
            "description": "The name of an existing ConfigMap with extra configuration for ClickHouse",
            "default": ""
        },
        "extraOverridesSecret": {
            "type": "string",
            "description": "The name of an existing ConfigMap with your custom configuration for ClickHouse",
            "default": ""
        },
        "usersExtraOverrides": {
            "type": "string",
            "description": "Users extra configuration overrides (evaluated as a template) apart from the default",
            "default": ""
        },
        "usersExtraOverridesConfigmap": {
            "type": "string",
            "description": "The name of an existing ConfigMap with users extra configuration for ClickHouse",
            "default": ""
        },
        "usersExtraOverridesSecret": {
            "type": "string",
            "description": "The name of an existing ConfigMap with your custom users configuration for ClickHouse",
            "default": ""
        },
        "initdbScripts": {
            "type": "object",
            "description": "Dictionary of initdb scripts",
            "default": {}
        },
        "initdbScriptsSecret": {
            "type": "string",
            "description": "ConfigMap with the initdb scripts (Note: Overrides `initdbScripts`)",
            "default": ""
        },
        "startdbScripts": {
            "type": "object",
            "description": "Dictionary of startdb scripts",
            "default": {}
        },
        "startdbScriptsSecret": {
            "type": "string",
            "description": "ConfigMap with the startdb scripts (Note: Overrides `startdbScripts`)",
            "default": ""
        },
        "command": {
            "type": "array",
            "description": "Override default container command (useful when using custom images)",
            "default": [
                "/scripts/setup.sh"
            ],
            "items": {
                "type": "string"
            }
        },
        "args": {
            "type": "array",
            "description": "Override default container args (useful when using custom images)",
            "default": [],
            "items": {}
        },
        "hostAliases": {
            "type": "array",
            "description": "ClickHouse pods host aliases",
            "default": [],
            "items": {}
        },
        "podLabels": {
            "type": "object",
            "description": "Extra labels for ClickHouse pods",
            "default": {}
        },
        "podAnnotations": {
            "type": "object",
            "description": "Annotations for ClickHouse pods",
            "default": {}
        },
        "podAffinityPreset": {
            "type": "string",
            "description": "Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
            "default": ""
        },
        "podAntiAffinityPreset": {
            "type": "string",
            "description": "Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
            "default": "soft"
        },
        "nodeAffinityPreset": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "key": {
                    "type": "string",
                    "description": "Node label key to match. Ignored if `affinity` is set",
                    "default": ""
                },
                "values": {
                    "type": "array",
                    "description": "Node label values to match. Ignored if `affinity` is set",
                    "default": [],
                    "items": {}
                }
            }
        },
        "affinity": {
            "type": "object",
            "description": "Affinity for ClickHouse pods assignment",
            "default": {}
        },
        "nodeSelector": {
            "type": "object",
            "description": "Node labels for ClickHouse pods assignment",
            "default": {}
        },
        "tolerations": {
            "type": "array",
            "description": "Tolerations for ClickHouse pods assignment",
            "default": [],
            "items": {}
        },
        "updateStrategy": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "ClickHouse statefulset strategy type",
                    "default": "RollingUpdate"
                }
            }
        },
        "podManagementPolicy": {
            "type": "string",
            "description": "Statefulset Pod management policy, it needs to be Parallel to be able to complete the cluster join",
            "default": "Parallel"
        },
        "priorityClassName": {
            "type": "string",
            "description": "ClickHouse pods' priorityClassName",
            "default": ""
        },
        "topologySpreadConstraints": {
            "type": "array",
            "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template",
            "default": [],
            "items": {}
        },
        "schedulerName": {
            "type": "string",
            "description": "Name of the k8s scheduler (other than default) for ClickHouse pods",
            "default": ""
        },
        "terminationGracePeriodSeconds": {
            "type": "string",
            "description": "Seconds Redmine pod needs to terminate gracefully",
            "default": ""
        },
        "lifecycleHooks": {
            "type": "object",
            "description": "for the ClickHouse container(s) to automate configuration before or after startup",
            "default": {}
        },
        "extraEnvVars": {
            "type": "array",
            "description": "Array with extra environment variables to add to ClickHouse nodes",
            "default": [],
            "items": {}
        },
        "extraEnvVarsCM": {
            "type": "string",
            "description": "Name of existing ConfigMap containing extra env vars for ClickHouse nodes",
            "default": ""
        },
        "extraEnvVarsSecret": {
            "type": "string",
            "description": "Name of existing Secret containing extra env vars for ClickHouse nodes",
            "default": ""
        },
        "extraVolumes": {
            "type": "array",
            "description": "Optionally specify extra list of additional volumes for the ClickHouse pod(s)",
            "default": [],
            "items": {}
        },
        "extraVolumeMounts": {
            "type": "array",
            "description": "Optionally specify extra list of additional volumeMounts for the ClickHouse container(s)",
            "default": [],
            "items": {}
        },
        "sidecars": {
            "type": "array",
            "description": "Add additional sidecar containers to the ClickHouse pod(s)",
            "default": [],
            "items": {}
        },
        "initContainers": {
            "type": "array",
            "description": "Add additional init containers to the ClickHouse pod(s)",
            "default": [],
            "items": {}
        },
        "tls": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable TLS traffic support",
                    "default": false
                },
                "autoGenerated": {
                    "type": "boolean",
                    "description": "Generate automatically self-signed TLS certificates",
                    "default": false
                },
                "certificatesSecret": {
                    "type": "string",
                    "description": "Name of an existing secret that contains the certificates",
                    "default": ""
                },
                "certFilename": {
                    "type": "string",
                    "description": "Certificate filename",
                    "default": ""
                },
                "certKeyFilename": {
                    "type": "string",
                    "description": "Certificate key filename",
                    "default": ""
                },
                "certCAFilename": {
                    "type": "string",
                    "description": "CA Certificate filename",
                    "default": ""
                }
            }
        },
        "service": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "ClickHouse service type",
                    "default": "ClusterIP"
                },
                "ports": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "ClickHouse service HTTP port",
                            "default": 8123
                        },
                        "https": {
                            "type": "number",
                            "description": "ClickHouse service HTTPS port",
                            "default": 443
                        },
                        "tcp": {
                            "type": "number",
                            "description": "ClickHouse service TCP port",
                            "default": 9000
                        },
                        "tcpSecure": {
                            "type": "number",
                            "description": "ClickHouse service TCP (secure) port",
                            "default": 9440
                        },
                        "keeper": {
                            "type": "number",
                            "description": "ClickHouse keeper TCP container port",
                            "default": 2181
                        },
                        "keeperSecure": {
                            "type": "number",
                            "description": "ClickHouse keeper TCP (secure) container port",
                            "default": 3181
                        },
                        "keeperInter": {
                            "type": "number",
                            "description": "ClickHouse keeper interserver TCP container port",
                            "default": 9444
                        },
                        "mysql": {
                            "type": "number",
                            "description": "ClickHouse service MySQL port",
                            "default": 9004
                        },
                        "postgresql": {
                            "type": "number",
                            "description": "ClickHouse service PostgreSQL port",
                            "default": 9005
                        },
                        "interserver": {
                            "type": "number",
                            "description": "ClickHouse service Interserver port",
                            "default": 9009
                        },
                        "metrics": {
                            "type": "number",
                            "description": "ClickHouse service metrics port",
                            "default": 8001
                        }
                    }
                },
                "nodePorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "string",
                            "description": "Node port for HTTP",
                            "default": ""
                        },
                        "https": {
                            "type": "string",
                            "description": "Node port for HTTPS",
                            "default": ""
                        },
                        "tcp": {
                            "type": "string",
                            "description": "Node port for TCP",
                            "default": ""
                        },
                        "tcpSecure": {
                            "type": "string",
                            "description": "Node port for TCP (with TLS)",
                            "default": ""
                        },
                        "keeper": {
                            "type": "string",
                            "description": "ClickHouse keeper TCP container port",
                            "default": ""
                        },
                        "keeperSecure": {
                            "type": "string",
                            "description": "ClickHouse keeper TCP (secure) container port",
                            "default": ""
                        },
                        "keeperInter": {
                            "type": "string",
                            "description": "ClickHouse keeper interserver TCP container port",
                            "default": ""
                        },
                        "mysql": {
                            "type": "string",
                            "description": "Node port for MySQL",
                            "default": ""
                        },
                        "postgresql": {
                            "type": "string",
                            "description": "Node port for PostgreSQL",
                            "default": ""
                        },
                        "interserver": {
                            "type": "string",
                            "description": "Node port for Interserver",
                            "default": ""
                        },
                        "metrics": {
                            "type": "string",
                            "description": "Node port for metrics",
                            "default": ""
                        }
                    }
                },
                "clusterIP": {
                    "type": "string",
                    "description": "ClickHouse service Cluster IP",
                    "default": ""
                },
                "loadBalancerIP": {
                    "type": "string",
                    "description": "ClickHouse service Load Balancer IP",
                    "default": ""
                },
                "loadBalancerSourceRanges": {
                    "type": "array",
                    "description": "ClickHouse service Load Balancer sources",
                    "default": [],
                    "items": {}
                },
                "externalTrafficPolicy": {
                    "type": "string",
                    "description": "ClickHouse service external traffic policy",
                    "default": "Cluster"
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional custom annotations for ClickHouse service",
                    "default": {}
                },
                "extraPorts": {
                    "type": "array",
                    "description": "Extra ports to expose in ClickHouse service (normally used with the `sidecars` value)",
                    "default": [],
                    "items": {}
                },
                "sessionAffinity": {
                    "type": "string",
                    "description": "Control where client requests go, to the same pod or round-robin",
                    "default": "None"
                },
                "sessionAffinityConfig": {
                    "type": "object",
                    "description": "Additional settings for the sessionAffinity",
                    "default": {}
                },
                "headless": {
                    "type": "object",
                    "properties": {
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for the headless service.",
                            "default": {}
                        }
                    }
                }
            }
        },
        "externalAccess": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable Kubernetes external cluster access to ClickHouse",
                    "default": false
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Kubernetes Service type for external access. It can be NodePort, LoadBalancer or ClusterIP",
                            "default": "LoadBalancer"
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "ClickHouse service HTTP port",
                                    "default": 80
                                },
                                "https": {
                                    "type": "number",
                                    "description": "ClickHouse service HTTPS port",
                                    "default": 443
                                },
                                "tcp": {
                                    "type": "number",
                                    "description": "ClickHouse service TCP port",
                                    "default": 9000
                                },
                                "tcpSecure": {
                                    "type": "number",
                                    "description": "ClickHouse service TCP (secure) port",
                                    "default": 9440
                                },
                                "keeper": {
                                    "type": "number",
                                    "description": "ClickHouse keeper TCP container port",
                                    "default": 2181
                                },
                                "keeperSecure": {
                                    "type": "number",
                                    "description": "ClickHouse keeper TCP (secure) container port",
                                    "default": 3181
                                },
                                "keeperInter": {
                                    "type": "number",
                                    "description": "ClickHouse keeper interserver TCP container port",
                                    "default": 9444
                                },
                                "mysql": {
                                    "type": "number",
                                    "description": "ClickHouse service MySQL port",
                                    "default": 9004
                                },
                                "postgresql": {
                                    "type": "number",
                                    "description": "ClickHouse service PostgreSQL port",
                                    "default": 9005
                                },
                                "interserver": {
                                    "type": "number",
                                    "description": "ClickHouse service Interserver port",
                                    "default": 9009
                                },
                                "metrics": {
                                    "type": "number",
                                    "description": "ClickHouse service metrics port",
                                    "default": 8001
                                }
                            }
                        },
                        "loadBalancerIPs": {
                            "type": "array",
                            "description": "Array of load balancer IPs for each ClickHouse . Length must be the same as replicaCount",
                            "default": [],
                            "items": {}
                        },
                        "loadBalancerAnnotations": {
                            "type": "array",
                            "description": "Array of load balancer annotations for each ClickHouse . Length must be the same as replicaCount",
                            "default": [],
                            "items": {}
                        },
                        "loadBalancerSourceRanges": {
                            "type": "array",
                            "description": "Address(es) that are allowed when service is LoadBalancer",
                            "default": [],
                            "items": {}
                        },
                        "nodePorts": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "array",
                                    "description": "Node port for HTTP",
                                    "default": [],
                                    "items": {}
                                },
                                "https": {
                                    "type": "array",
                                    "description": "Node port for HTTPS",
                                    "default": [],
                                    "items": {}
                                },
                                "tcp": {
                                    "type": "array",
                                    "description": "Node port for TCP",
                                    "default": [],
                                    "items": {}
                                },
                                "tcpSecure": {
                                    "type": "array",
                                    "description": "Node port for TCP (with TLS)",
                                    "default": [],
                                    "items": {}
                                },
                                "keeper": {
                                    "type": "array",
                                    "description": "ClickHouse keeper TCP container port",
                                    "default": [],
                                    "items": {}
                                },
                                "keeperSecure": {
                                    "type": "array",
                                    "description": "ClickHouse keeper TCP container port (with TLS)",
                                    "default": [],
                                    "items": {}
                                },
                                "keeperInter": {
                                    "type": "array",
                                    "description": "ClickHouse keeper interserver TCP container port",
                                    "default": [],
                                    "items": {}
                                },
                                "mysql": {
                                    "type": "array",
                                    "description": "Node port for MySQL",
                                    "default": [],
                                    "items": {}
                                },
                                "postgresql": {
                                    "type": "array",
                                    "description": "Node port for PostgreSQL",
                                    "default": [],
                                    "items": {}
                                },
                                "interserver": {
                                    "type": "array",
                                    "description": "Node port for Interserver",
                                    "default": [],
                                    "items": {}
                                },
                                "metrics": {
                                    "type": "array",
                                    "description": "Node port for metrics",
                                    "default": [],
                                    "items": {}
                                }
                            }
                        },
                        "labels": {
                            "type": "object",
                            "description": "Service labels for external access",
                            "default": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Service annotations for external access",
                            "default": {}
                        },
                        "extraPorts": {
                            "type": "array",
                            "description": "Extra ports to expose in the ClickHouse external service",
                            "default": [],
                            "items": {}
                        }
                    }
                }
            }
        },
        "ingress": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable ingress record generation for ClickHouse",
                    "default": false
                },
                "pathType": {
                    "type": "string",
                    "description": "Ingress path type",
                    "default": "ImplementationSpecific"
                },
                "apiVersion": {
                    "type": "string",
                    "description": "Force Ingress API version (automatically detected if not set)",
                    "default": ""
                },
                "hostname": {
                    "type": "string",
                    "description": "Default host for the ingress record",
                    "default": "clickhouse.local"
                },
                "ingressClassName": {
                    "type": "string",
                    "description": "IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)",
                    "default": ""
                },
                "path": {
                    "type": "string",
                    "description": "Default path for the ingress record",
                    "default": "/"
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.",
                    "default": {}
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS configuration for the host defined at `ingress.hostname` parameter",
                    "default": false
                },
                "selfSigned": {
                    "type": "boolean",
                    "description": "Create a TLS secret for this ingress record using self-signed certificates generated by Helm",
                    "default": false
                },
                "extraHosts": {
                    "type": "array",
                    "description": "An array with additional hostname(s) to be covered with the ingress record",
                    "default": [],
                    "items": {}
                },
                "extraPaths": {
                    "type": "array",
                    "description": "An array with additional arbitrary paths that may need to be added to the ingress under the main host",
                    "default": [],
                    "items": {}
                },
                "extraTls": {
                    "type": "array",
                    "description": "TLS configuration for additional hostname(s) to be covered with this ingress record",
                    "default": [],
                    "items": {}
                },
                "secrets": {
                    "type": "array",
                    "description": "Custom TLS certificates as secrets",
                    "default": [],
                    "items": {}
                },
                "extraRules": {
                    "type": "array",
                    "description": "Additional rules to be covered with this ingress record",
                    "default": [],
                    "items": {}
                }
            }
        },
        "persistence": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable persistence using Persistent Volume Claims",
                    "default": true
                },
                "existingClaim": {
                    "type": "string",
                    "description": "Name of an existing PVC to use",
                    "default": ""
                },
                "storageClass": {
                    "type": "string",
                    "description": "Storage class of backing PVC",
                    "default": ""
                },
                "labels": {
                    "type": "object",
                    "description": "Persistent Volume Claim labels",
                    "default": {}
                },
                "annotations": {
                    "type": "object",
                    "description": "Persistent Volume Claim annotations",
                    "default": {}
                },
                "accessModes": {
                    "type": "array",
                    "description": "Persistent Volume Access Modes",
                    "default": [
                        "ReadWriteOnce"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "size": {
                    "type": "string",
                    "description": "Size of data volume",
                    "default": "8Gi"
                },
                "selector": {
                    "type": "object",
                    "description": "Selector to match an existing Persistent Volume for WordPress data PVC",
                    "default": {}
                },
                "dataSource": {
                    "type": "object",
                    "description": "Custom PVC data source",
                    "default": {}
                }
            }
        },
        "volumePermissions": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable init container that changes the owner/group of the PV mount point to `runAsUser:fsGroup`",
                    "default": false
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "OS Shell + Utility image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "OS Shell + Utility image repository",
                            "default": "bitnami/os-shell"
                        },
                        "tag": {
                            "type": "string",
                            "description": "OS Shell + Utility image tag (immutable tags are recommended)",
                            "default": "11-debian-11-r60"
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "OS Shell + Utility image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "OS Shell + Utility image pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the init container",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the init container",
                            "default": {}
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "runAsUser": {
                            "type": "number",
                            "description": "Set init container's Security Context runAsUser",
                            "default": 0
                        }
                    }
                }
            }
        },
        "serviceAccount": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Specifies whether a ServiceAccount should be created",
                    "default": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the ServiceAccount to use.",
                    "default": ""
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional Service Account annotations (evaluated as a template)",
                    "default": {}
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "Automount service account token for the server service account",
                    "default": true
                }
            }
        },
        "metrics": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable the export of Prometheus metrics",
                    "default": false
                },
                "podAnnotations": {
                    "type": "object",
                    "properties": {
                        "prometheus": {
                            "type": "object",
                            "properties": {
                                "io/scrape": {
                                    "type": "string",
                                    "description": "",
                                    "default": "true"
                                },
                                "io/port": {
                                    "type": "string",
                                    "description": "",
                                    "default": "{{ .Values.containerPorts.metrics }}"
                                }
                            }
                        }
                    }
                },
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "if `true`, creates a Prometheus Operator ServiceMonitor (also requires `metrics.enabled` to be `true`)",
                            "default": false
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace in which Prometheus is running",
                            "default": ""
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional custom annotations for the ServiceMonitor",
                            "default": {}
                        },
                        "labels": {
                            "type": "object",
                            "description": "Extra labels for the ServiceMonitor",
                            "default": {}
                        },
                        "jobLabel": {
                            "type": "string",
                            "description": "The name of the label on the target service to use as the job name in Prometheus",
                            "default": ""
                        },
                        "honorLabels": {
                            "type": "boolean",
                            "description": "honorLabels chooses the metric's labels on collisions with target labels",
                            "default": false
                        },
                        "interval": {
                            "type": "string",
                            "description": "Interval at which metrics should be scraped.",
                            "default": ""
                        },
                        "scrapeTimeout": {
                            "type": "string",
                            "description": "Timeout after which the scrape is ended",
                            "default": ""
                        },
                        "metricRelabelings": {
                            "type": "array",
                            "description": "Specify additional relabeling of metrics",
                            "default": [],
                            "items": {}
                        },
                        "relabelings": {
                            "type": "array",
                            "description": "Specify general relabeling",
                            "default": [],
                            "items": {}
                        },
                        "selector": {
                            "type": "object",
                            "description": "Prometheus instance selector labels",
                            "default": {}
                        }
                    }
                },
                "prometheusRule": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Create a PrometheusRule for Prometheus Operator",
                            "default": false
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace for the PrometheusRule Resource (defaults to the Release Namespace)",
                            "default": ""
                        },
                        "additionalLabels": {
                            "type": "object",
                            "description": "Additional labels that can be used so PrometheusRule will be discovered by Prometheus",
                            "default": {}
                        },
                        "rules": {
                            "type": "array",
                            "description": "PrometheusRule definitions",
                            "default": [],
                            "items": {}
                        }
                    }
                }
            }
        },
        "externalZookeeper": {
            "type": "object",
            "properties": {
                "servers": {
                    "type": "array",
                    "description": "List of external zookeeper servers to use",
                    "default": [],
                    "items": {}
                },
                "port": {
                    "type": "number",
                    "description": "Port of the Zookeeper servers",
                    "default": 2888
                }
            }
        },
        "zookeeper": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Deploy Zookeeper subchart",
                    "default": true
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of Zookeeper instances",
                    "default": 3
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "ports": {
                            "type": "object",
                            "properties": {
                                "client": {
                                    "type": "number",
                                    "description": "Zookeeper client port",
                                    "default": 2181
                                }
                            }
                        }
                    }
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Zookeeper image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Zookeeper image repository",
                            "default": "bitnami/zookeeper"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Zookeeper image tag (immutable tags are recommended)",
                            "default": "3.8.2-debian-11-r43"
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Zookeeper image pull policy",
                            "default": "IfNotPresent"
                        }
                    }
                }
            }
        }
    }
}
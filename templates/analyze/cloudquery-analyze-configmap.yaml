apiVersion: v1
kind: ConfigMap
metadata:
  name: cloudquery-analyze-configmap
data:
  application.yml: |
    # 指定服务启动端口
    server:
      port: 9007
      error:
        include-exception: true
        include-stacktrace: always
      servlet:
        context-path: /analyze
    # 定义日志级别
    logging:
      level:
        cn.bintools.cloudquery: info
    management:
      endpoint:
        health:
          probes:
            enabled: true
      health:
        livenessstate:
          enabled: true
        readinessstate:
          enabled: true

    ## 增加mybatis配置
    mybatis:
      config-location: classpath:mybatis-config.xml
      type-aliases-package: cn.bintools.cloudquery.analyze,cn.bintools.cloudquery.analyze.mapper
      mapper-locations: classpath*:mapper/*.xml
    version:
      script-path: /opt/cloudquery/script-path

    measurement:
      ## 慢sql时间，单位 ms
      slow-sql-time: 500
      high-risk-operate: DELETE,DROP,GRANT

    #数据库配置
    spring:
      context:
        xml:
          path: file:/opt/cloudquery/config/spring-context.xml
      main:
        allow-circular-references: true
      application:
        name: cloudquery-analyze
      cloud:
        zookeeper:
          connect-string: cloudquery-zookeeper:2181
      jackson:
        time-zone: GMT+8
      redis:
        database: 1
        host: cloudquery-redis-master
        port: 6379
        password: nya6X#uSes@
      datasource:
        jdbc-url: jdbc:postgresql://cloudquery-postgresql:5432/postgres?TimeZone=Asia/Shanghai
        username: postgres
        password: WVCmFZs841@
        driver-class-name: org.postgresql.Driver
        ck:
          jdbc-url: jdbc:clickhouse://cloudquery-clickhouse:8123/default?rewriteBatchedStatements=true&use_server_time_zone=Asia/Shanghai&use_time_zone=Asia/Shanghai
          username: admin
          password: aIzFD0oEUa
          driver-class-name: ru.yandex.clickhouse.ClickHouseDriver
      jpa:
        show-sql: false
        open-in-view: true
        hibernate:
          ddl-auto: update
        properties:
          hibernate:
            enable_lazy_load_no_trans: true
            jdbc:
              time_zone: Asia/Shanghai
              lob:
                non_contextual_creation: true
              batch_size: 500
              batch_versioned_data: true
            dialect: org.hibernate.dialect.PostgreSQLDialect
      thymeleaf:
        enabled: true
        mode: HTML5
        encoding: UTF-8
        prefix: classpath:/templates/ # 模板存放在资源目录的 templates/ 文件下
        suffix: .html # 模板后缀
        check-template-location: true
        check-template: false
        cache: false # 调试时关闭缓存
      servlet:
        multipart:
          max-file-size: 400MB
          max-request-size: 1024MB
    ########################################################################################################################
    dubbo:
      scan:
        base-packages: cn.bintools.cloudquery.analyze
      application:
        id: cloudquery-analyze
        name: cloudquery-analyze
      protocol:
        id: analyze
        name: dubbo
        port: 12370
        payload: 20971520


      registry:
        id: zookeeper-analyzeDev
        address: zookeeper://cloudquery-zookeeper:2181
      consumer:
        timeout: 300000
        group: cloudquery_test1
        check: false

    archive:
      enabled: false
      archiveCron: 0 0 2 * * ?
      unarchiveRange: 6
      flushRate: 1
      archivedFile: /opt/cloudquery/archive
      clearBkRate: 0 0 0 1 */6 ?

    ###########################################################审计表字段############################################################
    sync:
      #数据同步的频率
      cron: 0 */5 * * * ?
      count: 7
      # 这里存放的是需要同步的表的map
      sync-map:
        #   需要同步的连接信息表
        CONNECTION:
          #     从pg中获取数据的sql语句
          selectSql: "SELECT * FROM public.cq_user_connections WHERE order_date < now() and order_date > (SELECT COALESCE(max(sync_time), '2000-02-06 09:21:53.549765 +08:00') FROM sync_log where sync_type = '%s') order by order_date"
          #     数据写入到ck中的sql语句
          insertSql: "INSERT INTO default.ods_cq_user_connections (connection_id, created_at, deleted_at, is_deleted, updated_at, alias, conn_name, connection_status, creator, data_source_name, driver_name, driver_version, exporter_addr, host_addr, monitor_port, monitor_switch, order_date, order_num, port, user_inputs) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
          #     当要插入的数据主键已存在时，说明该数据是需要修改的，删除原记录直接替换
          deleteSql: "ALTER TABLE default.ods_cq_user_connections DELETE WHERE connection_id in (%s)"
          type: "CONNECTION"
          #     表的主键，用以判断是更新还是新增数据
          primary: "connection_id"
          time: "order_date"
          #     表中的所有列及类型
          columns:
            connection_id: "Long"
            created_at: "Date"
            deleted_at: "Date"
            is_deleted: "Boolean"
            updated_at: "Date"
            alias: "String"
            conn_name: "String"
            connection_status: "Int"
            creator: "String"
            data_source_name: "String"
            driver_name: "String"
            driver_version: "String"
            exporter_addr: "String"
            host_addr: "String"
            monitor_port: "Int"
            monitor_switch: "Boolean"
            order_date: "Date"
            order_num: "Int"
            port: "Int"
            user_inputs: "String"
        #   操作审计表
        OPERATE:
          selectSql: "SELECT * FROM public.audit_operate_log WHERE end_time < now() and end_time > (SELECT COALESCE(max(sync_time), '2000-02-06 09:21:53.549765 +08:00') FROM sync_log where sync_type = '%s') order by end_time"
          insertSql: "INSERT INTO default.ods_audit_operate_log (id, begin_time, business_type, client_ip, detail, end_time, operate_entry_point, operate_target, operate_type, result_flag, seconds, user_id, user_name, applyid, session_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
          deleteSql: "ALTER TABLE default.ods_audit_operate_log DELETE WHERE id in (%s)"
          type: "OPERATE"
          primary: "id"
          time: "end_time"
          columns:
            id: "Long"
            begin_time: "Date"
            business_type: "String"
            client_ip: "String"
            detail: "String"
            end_time: "Date"
            operate_entry_point: "String"
            operate_target: "String"
            operate_type: "String"
            result_flag: "Boolean"
            seconds: "Long"
            user_id: "String"
            user_name: "String"
            applyid: "Long"
            session_id: "String"
        #   执行审计表
        EXECUTE:
          selectSql: "SELECT * FROM public.extrat_audit_record WHERE log_create_time < now() and log_create_time > (SELECT COALESCE(max(sync_time), '2000-02-06 09:21:53.549765 +08:00') FROM sync_log where sync_type = '%s') order by log_create_time"
          insertSql: "INSERT INTO default.ods_extrat_audit_record (id, log_type, sql_type, client_agent, client_ip, server_ip, execute_sql, error_msg, executor, execute_begin, execute_end, extrat_flag, log_create_time, transfer_time, db_edition, seconds, result_flag, execute_cost, full_scan_flag, database_name, port, affect_rows, connection_name, db_name, executor_name, approve_user, table_name, sql_parse_flag, session_id, explain, resource_id, check_permission_id, original_sql, connection_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
          deleteSql: "ALTER TABLE default.ods_extrat_audit_record DELETE WHERE id in (%s)"
          type: "EXECUTE"
          primary: "id"
          time: "log_create_time"
          columns:
            id: "Long"
            log_type: "String"
            sql_type: "String"
            client_agent: "String"
            client_ip: "String"
            server_ip: "String"
            execute_sql: "String"
            error_msg: "String"
            executor: "String"
            execute_begin: "Date"
            execute_end: "Date"
            extrat_flag: "Boolean"
            log_create_time: "Date"
            transfer_time: "Date"
            db_edition: "String"
            seconds: "Long"
            result_flag: "Boolean"
            execute_cost: "Long"
            full_scan_flag: "Boolean"
            database_name: "String"
            port: "Int"
            affect_rows: "Int"
            connection_name: "String"
            db_name: "String"
            executor_name: "String"
            approve_user: "String"
            table_name: "String"
            sql_parse_flag: "Int"
            session_id: "String"
            explain: "String"
            resource_id: "String"
            check_permission_id: "String"
            original_sql: "String"
            connection_id: "Long"
        #   角色表
        ROLE:
          selectSql: "SELECT * FROM public.cq_role WHERE updated_at < now() and updated_at > (SELECT COALESCE(max(sync_time), '2000-02-06 09:21:53.549765 +08:00') FROM sync_log where sync_type = '%s') order by updated_at"
          insertSql: "INSERT INTO default.ods_cq_role (id, created_at, deleted_at, is_deleted, updated_at, connection_id, data_source_type, model_type, name, props, role_type) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
          deleteSql: "ALTER TABLE default.ods_cq_role DELETE WHERE id in (%s)"
          type: "ROLE"
          primary: "id"
          time: "updated_at"
          columns:
            id: "Long"
            created_at: "Date"
            deleted_at: "Date"
            is_deleted: "Boolean"
            updated_at: "Date"
            connection_id: "Long"
            data_source_type: "String"
            model_type: "String"
            name: "String"
            props: "String"
            role_type: "String"
        #   权限表
        PERMISSION:
          selectSql: "SELECT * FROM public.cq_permission WHERE updated_at < now() and updated_at > (SELECT COALESCE(max(sync_time), '2000-02-06 09:21:53.549765 +08:00') FROM sync_log where sync_type = '%s') order by updated_at"
          insertSql: "INSERT INTO default.ods_cq_permission (id, created_at, deleted_at, is_deleted, updated_at, connection_id, data_source_type, description, model_type, name, object, object_type, operation, permission_type, props) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
          deleteSql: "ALTER TABLE default.ods_cq_permission DELETE WHERE id in (%s)"
          type: "PERMISSION"
          primary: "id"
          time: "updated_at"
          columns:
            id: "Long"
            created_at: "Date"
            deleted_at: "Date"
            is_deleted: "Boolean"
            updated_at: "Date"
            connection_id: "Long"
            data_source_type: "String"
            description: "String"
            model_type: "String"
            name: "String"
            object: "String"
            object_type: "String"
            operation: "String"
            permission_type: "String"
            props: "String"
        #   用户表
        USER:
          selectSql: "SELECT * FROM public.cq_user WHERE updated_at < now() and updated_at > (SELECT COALESCE(max(sync_time), '2000-02-06 09:21:53.549765 +08:00') FROM sync_log where sync_type = '%s') order by updated_at"
          insertSql: "INSERT INTO default.ods_cq_user (id, created_at, deleted_at, is_deleted, updated_at, name, user_id, company_id, department_id, email, gender, job_number, phone, post_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
          deleteSql: "ALTER TABLE default.ods_cq_user DELETE WHERE id in (%s)"
          type: "USER"
          primary: "id"
          time: "updated_at"
          columns:
            id: "Long"
            created_at: "Date"
            deleted_at: "Date"
            is_deleted: "Boolean"
            updated_at: "Date"
            name: "String"
            user_id: "String"
            company_id: "Long"
            department_id: "Long"
            email: "String"
            gender: "String"
            job_number: "String"
            phone: "String"
            post_id: "Long"
        #   字典节点表
        NODE:
          selectSql: "SELECT * FROM public.data_dict_node_info WHERE updated < now() and updated > (SELECT COALESCE(max(sync_time), '2000-02-06 09:21:53.549765 +08:00') FROM sync_log where sync_type = '%s') order by updated"
          insertSql: "INSERT INTO default.ods_data_dict_node_info (id, created, updated, child_count, connection_id, connection_type, has_child, internal_node_path, node_description, node_name, node_options, node_path, node_type, parent_id, permission_path) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
          deleteSql: "ALTER TABLE default.ods_data_dict_node_info DELETE WHERE id in (%s)"
          type: "NODE"
          primary: "id"
          time: "updated"
          columns:
            id: "Long"
            created: "Date"
            updated: "Date"
            child_count: "Int"
            connection_id: "Long"
            connection_type: "String"
            has_child: "Boolean"
            internal_node_path: "String"
            node_description: "String"
            node_name: "String"
            node_options: "String"
            node_path: "String"
            node_type: "String"
            parent_id: "Long"
            permission_path: "String"
        #   授权日志表
        AUTH:
          selectSql: "SELECT * FROM public.cq_user_authorization_log WHERE created_at < now() and created_at > (SELECT COALESCE(max(sync_time), '2000-02-06 09:21:53.549765 +08:00') FROM sync_log where sync_type = '%s') order by created_at"
          insertSql: "INSERT INTO default.ods_auth_operate_log (id, affect_flow_id, affect_permission_id, affect_role_id, affect_user_id, comment, created_at, model_type, module_type, operation_type, user_id, session_id, client_ip) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
          deleteSql: "ALTER TABLE default.ods_auth_operate_log DELETE WHERE id in (%s)"
          type: "AUTH"
          primary: "id"
          time: "created_at"
          columns:
            id: "Long"
            affect_flow_id: "Long"
            affect_permission_id: "Long"
            affect_role_id: "Long"
            affect_user_id: "String"
            comment: "String"
            created_at: "Date"
            model_type: "String"
            source_type: "String"
            operation_type: "String"
            user_id: "String"
            session_id: "String"
            client_ip: "String"

        #   角色权限关联表
        ROLE_PERMISSION:
          selectSql: "SELECT * FROM public.cq_role_permission_relationship WHERE updated_at < now() and updated_at > (SELECT COALESCE(max(sync_time), '2000-02-06 09:21:53.549765 +08:00') FROM sync_log where sync_type = '%s') order by updated_at"
          insertSql: "INSERT INTO default.ods_role_permission_relationship (id, created_at, deleted_at, is_deleted, updated_at, permission_id, role_id, model_type) VALUES (?, ?, ?, ?, ?, ?, ?, ?)"
          deleteSql: "ALTER TABLE default.ods_role_permission_relationship DELETE WHERE id in (%s)"
          type: "ROLE_PERMISSION"
          primary: "id"
          time: "updated_at"
          columns:
            id: "Long"
            created_at: "Date"
            deleted_at: "Date"
            is_deleted: "Boolean"
            updated_at: "Date"
            permission_id: "Long"
            role_id: "Long"
            model_type: "String"

        #   部门表
        DEPT:
          selectSql: "SELECT * FROM public.cq_org WHERE updated_at < now() and updated_at > (SELECT COALESCE(max(sync_time), '2000-02-06 09:21:53.549765 +08:00') FROM sync_log where sync_type = '%s') order by updated_at"
          insertSql: "INSERT INTO default.ods_cq_org (id, created_at, deleted_at, is_deleted, updated_at, description, manager_id, name, parent_id, type)VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
          deleteSql: "ALTER TABLE default.ods_cq_org DELETE WHERE id in (%s)"
          type: "DEPT"
          primary: "id"
          time: "updated_at"
          columns:
            id: "Long"
            created_at: "Date"
            deleted_at: "Date"
            is_deleted: "Boolean"
            updated_at: "Date"
            description: "String"
            manager_id: "String"
            name: "String"
            parent_id: "Long"
            type: "String"
        #   用户角色关联表
        USER_ROLE:
          selectSql: "SELECT * FROM public.cq_user_role_relationship WHERE updated_at < now() and updated_at > (SELECT COALESCE(max(sync_time), '2000-02-06 09:21:53.549765 +08:00') FROM sync_log where sync_type = '%s') order by updated_at"
          insertSql: "INSERT INTO default.ods_user_role_relationship (id, created_at, deleted_at, is_deleted, updated_at, model_type, role_id, user_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?)"
          deleteSql: "ALTER TABLE default.ods_user_role_relationship DELETE WHERE id in (%s)"
          type: "USER_ROLE"
          primary: "id"
          time: "updated_at"
          columns:
            id: "Long"
            created_at: "Date"
            deleted_at: "Date"
            is_deleted: "Boolean"
            updated_at: "Date"
            model_type: "String"
            role_id: "Long"
            user_id: "String"
        #   鉴权日志表
        AUTHENTICATION:
          selectSql: "SELECT * FROM public.cq_user_authentication_log WHERE created_at < now() and created_at > (SELECT COALESCE(max(sync_time), '2000-02-06 09:21:53.549765 +08:00') FROM sync_log where sync_type = '%s') order by created_at"
          insertSql: "INSERT INTO default.ods_cq_user_authentication_log (id, allow_permission_id_list, client_ip, deny_permission_id_list, execute_id, object, object_type, operation, result, result_type, session_id, user_id, verify_object_type, model_type, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
          deleteSql: "ALTER TABLE default.ods_cq_user_authentication_log DELETE WHERE id in (%s)"
          type: "AUTHENTICATION"
          primary: "id"
          time: "created_at"
          columns:
            id: "Long"
            allow_permission_id_list: "String"
            client_ip: "String"
            deny_permission_id_list: "String"
            execute_id: "String"
            object: "String"
            object_type: "String"
            operation: "String"
            result: "Boolean"
            result_type: "String"
            session_id: "String"
            user_id: "String"
            verify_object_type: "Boolean"
            model_type: "String"
            created_at: "Date"
  spring-context.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:mvc="http://www.springframework.org/schema/mvc"
           xmlns:p="http://www.springframework.org/schema/p"
           xmlns:aop="http://www.springframework.org/schema/aop"
           xmlns:context="http://www.springframework.org/schema/context"
           xmlns:jee="http://www.springframework.org/schema/jee"
           xmlns:tx="http://www.springframework.org/schema/tx"
           xmlns:task="http://www.springframework.org/schema/task"
           xsi:schemaLocation="
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
            http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
            http://www.springframework.org/schema/task
            http://www.springframework.org/schema/task/spring-task-3.0.xsd">
        <!-- 创建一个调度器 -->
        <task:scheduler id="schedualer"/>
        <context:property-placeholder location="file:/opt/cloudquery/config/sql.properties"/>
        <!-- 配置任务类的bean -->
        <!--        从pg中同步原始数据到clickhouse的ods层-->
        <bean id="syncDataTask" class="cn.bintools.cloudquery.analyze.service.SyncService">
            <property name="tasks">
                <list value-type="cn.bintools.cloudquery.analyze.pojo.model.SyncTask">
                    <ref bean="syncConnectionTask"/>
                    <ref bean="syncOperateTask"/>
                    <ref bean="syncExtratTask"/>
                    <ref bean="syncRoleTask"/>
                    <ref bean="syncPermissionTask"/>
                    <ref bean="syncUserTask"/>
                    <ref bean="syncNodeTask"/>
                    <ref bean="syncAuthTask"/>
                    <ref bean="syncRolePermissionTask"/>
                    <ref bean="syncDeptTask"/>
                    <ref bean="syncUserRoleTask"/>
                    <ref bean="syncAuthenticationTask"/>
                </list>
            </property>
        </bean>
        <bean id="syncConnectionTask" class="cn.bintools.cloudquery.analyze.pojo.model.SyncTask">
            <property name="type" value="CONNECTION" />
        </bean>
        <bean id="syncOperateTask" class="cn.bintools.cloudquery.analyze.pojo.model.SyncTask">
            <property name="type" value="OPERATE" />
        </bean>
        <bean id="syncExtratTask" class="cn.bintools.cloudquery.analyze.pojo.model.SyncTask">
            <property name="type" value="EXECUTE" />
        </bean>
        <bean id="syncRoleTask" class="cn.bintools.cloudquery.analyze.pojo.model.SyncTask">
            <property name="type" value="ROLE" />
        </bean>
        <bean id="syncPermissionTask" class="cn.bintools.cloudquery.analyze.pojo.model.SyncTask">
            <property name="type" value="PERMISSION" />
        </bean>
        <bean id="syncUserTask" class="cn.bintools.cloudquery.analyze.pojo.model.SyncTask">
            <property name="type" value="USER" />
        </bean>
        <bean id="syncNodeTask" class="cn.bintools.cloudquery.analyze.pojo.model.SyncTask">
            <property name="type" value="NODE" />
        </bean>
        <bean id="syncAuthTask" class="cn.bintools.cloudquery.analyze.pojo.model.SyncTask">
            <property name="type" value="AUTH" />
        </bean>
        <bean id="syncRolePermissionTask" class="cn.bintools.cloudquery.analyze.pojo.model.SyncTask">
            <property name="type" value="ROLE_PERMISSION" />
        </bean>
        <bean id="syncDeptTask" class="cn.bintools.cloudquery.analyze.pojo.model.SyncTask">
            <property name="type" value="DEPT" />
        </bean>
        <bean id="syncUserRoleTask" class="cn.bintools.cloudquery.analyze.pojo.model.SyncTask">
            <property name="type" value="USER_ROLE" />
        </bean>
        <bean id="syncAuthenticationTask" class="cn.bintools.cloudquery.analyze.pojo.model.SyncTask">
            <property name="type" value="AUTHENTICATION" />
        </bean>


        <!--        将clickhouse的ods层通过计算后转移到dwd层-->
        <bean id="calculateExecuteTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
            <property name="tasks">
                <list value-type="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
                    <ref bean="executeModel"/>
                </list>
            </property>
        </bean>
        <bean id="executeModel" class="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
            <property name="type" value="EXECUTE" />
            <property name="executeSql" value="${prop.insertExtratSql}" />
            <property name="deleteSql" value="${prop.deleteExtratSql}"/>
        </bean>


        <bean id="calculateOperateTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
            <property name="tasks">
                <list value-type="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
                    <ref bean="operateModel"/>
                </list>
            </property>
        </bean>
        <bean id="operateModel" class="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
            <property name="type" value="OPERATE" />
            <property name="executeSql" value="${prop.insertOperateSql}" />
            <property name="deleteSql" value="${prop.deleteOperateSql}"/>
        </bean>


        <bean id="calculateAuthTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
            <property name="tasks">
                <list value-type="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
                    <ref bean="authModel"/>
                </list>
            </property>
        </bean>
        <bean id="authModel" class="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
            <property name="type" value="AUTH" />
            <property name="executeSql" value="${prop.insertAuthSql}" />
            <property name="deleteSql" value="${prop.deleteAuthSql}"/>
        </bean>


        <bean id="calculateUserTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
            <property name="tasks">
                <list value-type="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
                    <ref bean="userModel"/>
                </list>
            </property>
        </bean>
        <bean id="userModel" class="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
            <property name="type" value="USER" />
            <property name="executeSql" value="${prop.insertUserSql}" />
            <property name="deleteSql" value="${prop.deleteUserSql}" />
        </bean>


        <bean id="calculatePermissionTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
            <property name="tasks">
                <list value-type="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
                    <ref bean="permissionModel"/>
                </list>
            </property>
        </bean>
        <bean id="permissionModel" class="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
            <property name="type" value="PERMISSION" />
            <property name="executeSql" value="${prop.insertPermissionSql}" />
            <property name="deleteSql" value="${prop.deletePermissionSql}" />
        </bean>

        <bean id="calculateRoleTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tasks">
                <list value-type="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
                    <ref bean="roleModel"/>
                </list>
            </property>
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="roleModel" class="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
            <property name="type" value="ROLE" />
            <property name="executeSql" value="${prop.insertRoleSql}" />
            <property name="deleteSql" value="${prop.deleteRoleSql}" />
        </bean>

        <bean id="calculateNodeTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tasks">
                <list value-type="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
                    <ref bean="nodeModel"/>
                </list>
            </property>
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="nodeModel" class="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
            <property name="type" value="NODE" />
            <property name="executeSql" value="${prop.insertNodeSql}" />
            <property name="deleteSql" value="${prop.deleteNodeSql}" />
        </bean>


        <bean id="calculateConnectionTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tasks">
                <list value-type="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
                    <ref bean="connectionModel"/>
                </list>
            </property>
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="connectionModel" class="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
            <property name="type" value="CONNECTION" />
            <property name="executeSql" value="${prop.insertConnectionSql}" />
            <property name="deleteSql" value="${prop.deleteConnectionSql}" />
        </bean>


        <bean id="calculateRolePermissionTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tasks">
                <list value-type="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
                    <ref bean="deptModel"/>
                    <ref bean="connectionModel"/>
                    <ref bean="userModel"/>
                    <ref bean="roleModel"/>
                    <ref bean="nodeModel"/>
                    <ref bean="permissionModel"/>
                    <ref bean="rolePermissionModel"/>
                    <ref bean="userRoleModel"/>
                    <ref bean="authModel"/>
                </list>
            </property>
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="rolePermissionModel" class="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
            <property name="type" value="ROLE_PERMISSION" />
            <property name="executeSql" value="${prop.insertRolePermissionSql}" />
            <property name="deleteSql" value="${prop.deleteRolePermissionSql}" />
        </bean>


        <bean id="calculateDeptTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tasks">
                <list value-type="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
                    <ref bean="deptModel"/>
                </list>
            </property>
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="deptModel" class="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
            <property name="type" value="DEPT" />
            <property name="executeSql" value="${prop.insertOrgSql}" />
            <property name="deleteSql" value="${prop.deleteOrgSql}" />
        </bean>


        <bean id="calculateUserRoleTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tasks">
                <list value-type="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
                    <ref bean="userRoleModel"/>
                </list>
            </property>
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="userRoleModel" class="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
            <property name="type" value="USER_ROLE" />
            <property name="executeSql" value="${prop.insertUserRoleSql}" />
            <property name="deleteSql" value="${prop.deleteUserRoleSql}" />
        </bean>


        <bean id="calculateAuthenticationTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tasks">
                <list value-type="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
                    <ref bean="authenticationModel"/>
                </list>
            </property>
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="authenticationModel" class="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
            <property name="type" value="AUTHENTICATION" />
            <property name="executeSql" value="${prop.insertAuthenticationSql}" />
            <property name="deleteSql" value="${prop.deleteAuthenticationSql}"/>
        </bean>

        <!--        计算出轻度汇总表，相当于之前的视图-->
        <bean id="mvCurrentUserAmountTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_current_user_amount" />
            <property name="executeSql" value="${prop.mvCurrentUserAmount}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvAuditRecordHoursTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_audit_record_hours" />
            <property name="executeSql" value="${prop.mvAuditRecordHours}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvAuditRecordDaysTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_audit_record_days" />
            <property name="executeSql" value="${prop.mvAuditRecordDays}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvAuditRecordMonths" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_audit_record_months" />
            <property name="executeSql" value="${prop.mvAuditRecordMonths}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvRecordHoursTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_record_hours" />
            <property name="executeSql" value="${prop.mvRecordHours}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvRecordDaysTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_record_days" />
            <property name="executeSql" value="${prop.mvRecordDays}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvUserFlowAmountTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_user_flow_amount" />
            <property name="executeSql" value="${prop.mvUserFlowAmount}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvUserAmountTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_user_amount" />
            <property name="executeSql" value="${prop.mvUserAmount}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvUserAmountHoursTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_user_amount_hours" />
            <property name="executeSql" value="${prop.mvUserAmountHours}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvUserAmountDaysTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_user_amount_days" />
            <property name="executeSql" value="${prop.mvUserAmountDays}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvUserAmountMonthsTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_user_amount_months" />
            <property name="executeSql" value="${prop.mvUserAmountMonths}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>

        <bean id="mvUserAmountQuatersTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_user_amount_quarters" />
            <property name="executeSql" value="${prop.mvUserAmountQuaters}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>

        <bean id="mvUserAmountWeeksTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_user_amount_weeks" />
            <property name="executeSql" value="${prop.mvUserAmountWeeks}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>

        <bean id="mvUserAmountYearsTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_user_amount_years" />
            <property name="executeSql" value="${prop.mvUserAmountYears}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>

        <bean id="mvOrgObjectTimeAmountHoursTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
            <property name="tasks">
                <list value-type="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
                    <ref bean="ootHourModel"/>
                </list>
            </property>
        </bean>
        <bean id="ootHourModel" class="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
            <property name="type" value="OOTHOUR" />
            <property name="executeSql" value="${prop.mvOrgObjectTimeAmountHours}" />
            <property name="deleteSql" value="${prop.deleteMvOrgObjectTimeAmountHours}"/>
            <property name="splitSql" value="${prop.splitMvOrgObjectTimeAmountHours}"/>
        </bean>

        <bean id="mvOrgObjectTimeAmountDaysTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
            <property name="tasks">
                <list value-type="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
                    <ref bean="ootDayModel"/>
                </list>
            </property>
        </bean>
        <bean id="ootDayModel" class="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
            <property name="type" value="OOTDAY" />
            <property name="executeSql" value="${prop.mvOrgObjectTimeAmountDays}" />
            <property name="deleteSql" value="${prop.deleteMvOrgObjectTimeAmountDays}"/>
            <property name="splitSql" value="${prop.splitMvOrgObjectTimeAmountDays}"/>
        </bean>

        <bean id="mvOrgObjectTimeAmountWeeksTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
            <property name="tasks">
                <list value-type="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
                    <ref bean="ootWeekModel"/>
                </list>
            </property>
        </bean>
        <bean id="ootWeekModel" class="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
            <property name="type" value="OOTWEEK" />
            <property name="executeSql" value="${prop.mvOrgObjectTimeAmountWeeks}" />
            <property name="deleteSql" value="${prop.deleteMvOrgObjectTimeAmountWeeks}"/>
            <property name="splitSql" value="${prop.splitMvOrgObjectTimeAmountWeeks}"/>
        </bean>

        <bean id="mvOrgObjectTimeAmountMonthsTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
            <property name="tasks">
                <list value-type="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
                    <ref bean="ootMonthModel"/>
                </list>
            </property>
        </bean>
        <bean id="ootMonthModel" class="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
            <property name="type" value="OOTMONTH" />
            <property name="executeSql" value="${prop.mvOrgObjectTimeAmountMonths}" />
            <property name="deleteSql" value="${prop.deleteMvOrgObjectTimeAmountMonths}"/>
            <property name="splitSql" value="${prop.splitMvOrgObjectTimeAmountMonths}"/>
        </bean>


        <bean id="mvOrgObjectTimeAmountQuartersTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
            <property name="tasks">
                <list value-type="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
                    <ref bean="ootQuarterModel"/>
                </list>
            </property>
        </bean>
        <bean id="ootQuarterModel" class="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
            <property name="type" value="OOTQUARTER" />
            <property name="executeSql" value="${prop.mvOrgObjectTimeAmountQuarters}" />
            <property name="deleteSql" value="${prop.deleteMvOrgObjectTimeAmountQuarters}"/>
            <property name="splitSql" value="${prop.splitMvOrgObjectTimeAmountQuarters}"/>
        </bean>

        <bean id="mvOrgObjectTimeAmountYearsTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
            <property name="tasks">
                <list value-type="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
                    <ref bean="ootYearModel"/>
                </list>
            </property>
        </bean>
        <bean id="ootYearModel" class="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
            <property name="type" value="OOTYEAR" />
            <property name="executeSql" value="${prop.mvOrgObjectTimeAmountYears}" />
            <property name="deleteSql" value="${prop.deleteMvOrgObjectTimeAmountYears}"/>
            <property name="splitSql" value="${prop.splitMvOrgObjectTimeAmountYears}"/>
        </bean>

        <bean id="mvOrgObjectTimeAmountTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
            <property name="tasks">
                <list value-type="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
                    <ref bean="ootModel"/>
                </list>
            </property>
        </bean>
        <bean id="ootModel" class="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
            <property name="type" value="OOT" />
            <property name="executeSql" value="${prop.mvOrgObjectTimeAmount}" />
            <property name="deleteSql" value="${prop.deleteMvOrgObjectTimeAmount}"/>
            <property name="splitSql" value="${prop.splitMvOrgObjectTimeAmount}"/>
        </bean>

        <bean id="dwdDimTimeHourTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="dwd_dim_time_hour" />
            <property name="executeSql" value="${prop.dwdDimTimeHour}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>

        <bean id="dwdDimTimeDayTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="dwd_dim_time_day" />
            <property name="executeSql" value="${prop.dwdDimTimeDay}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>

        <bean id="dwdDimTimeWeekTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="dwd_dim_time_week" />
            <property name="executeSql" value="${prop.dwdDimTimeWeek}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>

        <bean id="dwdDimTimeMonthTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="dwd_dim_time_month" />
            <property name="executeSql" value="${prop.dwdDimTimeMonth}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>


        <bean id="dwdDimTimeQuarterTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="dwd_dim_time_quarter" />
            <property name="executeSql" value="${prop.dwdDimTimeQuarter}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>


        <bean id="dwdDimTimeYearTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="dwd_dim_time_year" />
            <property name="executeSql" value="${prop.dwdDimTimeYear}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>

        <bean id="mvDbTypeAmountTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_db_type_amount" />
            <property name="executeSql" value="${prop.mvDbTypeAmount}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvSqlExecuteAmountTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_sql_execute_amount" />
            <property name="executeSql" value="${prop.mvSqlExecuteAmount}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvAllAuditAmountTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_all_audit_amount" />
            <property name="executeSql" value="${prop.mvAllAuditAmount}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvSqlExecuteErrorAmountTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_sql_execute_error_amount" />
            <property name="executeSql" value="${prop.mvSqlExecuteErrorAmount}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvTodaySqlExecuteAmountTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_today_sql_execute_amount" />
            <property name="executeSql" value="${prop.mvTodaySqlExecuteAmount}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvMonthSqlExecuteAmountTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_month_sql_execute_amount" />
            <property name="executeSql" value="${prop.mvMonthSqlExecuteAmount}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvTodaySqlOperateAmountTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_today_sql_operate_amount" />
            <property name="executeSql" value="${prop.mvTodaySqlOperateAmount}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvMonthSqlOperateAmountTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_month_sql_operate_amount" />
            <property name="executeSql" value="${prop.mvMonthSqlOperateAmount}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvTodaySqlExecuteErrorAmountTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_today_sql_execute_error_amount" />
            <property name="executeSql" value="${prop.mvTodaySqlExecuteErrorAmount}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvMonthSqlExecuteErrorAmountTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_month_sql_execute_error_amount" />
            <property name="executeSql" value="${prop.mvMonthSqlExecuteErrorAmount}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvLastMonthOperateAmountTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_last_month_operate_amount" />
            <property name="executeSql" value="${prop.mvLastMonthOperateAmount}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvLastMonthSqlExecuteAmountTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_last_month_sql_execute_amount" />
            <property name="executeSql" value="${prop.mvLastMonthSqlExecuteAmount}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvLastDayOperateAmountTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_last_day_operate_amount" />
            <property name="executeSql" value="${prop.mvLastDayOperateAmount}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvLastDaySqlExecuteAmountTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_last_day_sql_execute_amount" />
            <property name="executeSql" value="${prop.mvLastDaySqlExecuteAmount}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvMonthHighRiskSqlAmountTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_month_high_risk_sql_amount" />
            <property name="executeSql" value="${prop.mvMonthHighRiskSqlAmount}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvTodayHighRiskSqlAmountTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_today_high_risk_sql_amount" />
            <property name="executeSql" value="${prop.mvTodayHighRiskSqlAmount}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvMonthOverPermAmountTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_month_over_perm_amount" />
            <property name="executeSql" value="${prop.mvMonthOverPermAmount}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvDayOverPermAmountTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_today_over_perm_amount" />
            <property name="executeSql" value="${prop.mvDayOverPermAmount}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>

        <bean id="mvDbExecuteAvgHoursTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_db_execute_avg_hours" />
            <property name="executeSql" value="${prop.mvDbExecuteAvgHours}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvDbExecuteAvgDaysTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_db_execute_avg_days" />
            <property name="executeSql" value="${prop.mvDbExecuteAvgDays}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>
        <bean id="mvDbExecuteAvgMonthsTask" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="tableName" value="mv_db_execute_avg_months" />
            <property name="executeSql" value="${prop.mvDbExecuteAvgMonths}" />
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>

        <!--    生成dws层大宽表-->
        <bean id="dwsExtrat" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
            <property name="tasks">
                <list value-type="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
                    <ref bean="dwdExtratModel"/>
                </list>
            </property>
        </bean>
        <bean id="dwdExtratModel" class="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
            <property name="type" value="DWS_EXECUTE"/>
            <property name="dwdType" value="EXECUTE"/>
            <property name="executeSql" value="${prop.dwsExtrat}" />
            <property name="deleteSql" value="${prop.deleteDwsExtrat}"/>
        </bean>


        <bean id="dwsOperate" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
            <property name="tasks">
                <list value-type="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
                    <ref bean="dwdOperateModel"/>
                </list>
            </property>
        </bean>
        <bean id="dwdOperateModel" class="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
            <property name="executeSql" value="${prop.dwsOperate}" />
            <property name="deleteSql" value="${prop.deleteDwsOperate}"/>
            <property name="type" value="DWS_OPERATE"/>
            <property name="dwdType" value="OPERATE"/>
        </bean>

        <bean id="dwsAuth" class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
            <property name="tasks">
                <list value-type="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
                    <ref bean="dwdAuthModel"/>
                </list>
            </property>
        </bean>
        <bean id="dwdAuthModel" class="cn.bintools.cloudquery.analyze.pojo.model.CalculateTask">
            <property name="type" value="DWS_AUTH"/>
            <property name="dwdType" value="AUTH"/>
            <property name="executeSql" value="${prop.dwsAuth}" />
            <property name="deleteSql" value="${prop.deleteDwsAuth}"/>
        </bean>

        <bean id="calculateOrgRelation"  class="cn.bintools.cloudquery.analyze.service.CalculateService">
            <property name="url" value="${connection.url}" />
            <property name="user" value="${connection.user}" />
            <property name="pwd" value="aIzFD0oEUa" />
        </bean>


        <task:scheduled-tasks scheduler="schedualer">
            <!--        从pg中同步原始数据到clickhouse的ods层-->
            <task:scheduled ref="syncDataTask" method="syncData" cron="0 */1 * * * ?"/>

            <!--        将clickhouse的ods层通过计算后转移到dwd层-->
            <task:scheduled ref="calculateExecuteTask" method="calculateSql" cron="0 */1 * * * ?"/>
            <task:scheduled ref="calculateOperateTask" method="calculateSql" cron="0 */1 * * * ?"/>
            <task:scheduled ref="calculateAuthenticationTask" method="calculateSql" cron="0 */1 * * * ?"/>

            <task:scheduled ref="calculateOrgRelation" method="calculateOrgRelation" cron="0 */1 * * * ?"/>

            <!--        计算出轻度汇总表，相当于之前的视图-->
            <task:scheduled ref="mvCurrentUserAmountTask" method="flashMv" cron="0 */3 * * * ?"/>
            <task:scheduled ref="mvAuditRecordHoursTask" method="flashMv" cron="5 */3 * * * ?"/>
            <task:scheduled ref="mvAuditRecordDaysTask" method="flashMv" cron="10 */3 * * * ?"/>
            <task:scheduled ref="mvAuditRecordMonths" method="flashMv" cron="15 */3 * * * ?"/>
            <task:scheduled ref="mvUserFlowAmountTask" method="flashMv" cron="17 */3 * * * ?"/>
            <task:scheduled ref="mvUserAmountTask" method="flashMv" cron="20 */3 * * * ?"/>
            <task:scheduled ref="mvUserAmountHoursTask" method="flashMv" cron="25 */3 * * * ?"/>
            <task:scheduled ref="mvUserAmountDaysTask" method="flashMv" cron="30 */3 * * * ?"/>
            <task:scheduled ref="mvUserAmountMonthsTask" method="flashMv" cron="35 */3 * * * ?"/>
            <task:scheduled ref="mvUserAmountQuatersTask" method="flashMv" cron="40 */3 * * * ?"/>
            <task:scheduled ref="mvUserAmountWeeksTask" method="flashMv" cron="45 */3 * * * ?"/>
            <task:scheduled ref="mvUserAmountYearsTask" method="flashMv" cron="50 */3 * * * ?"/>
            <task:scheduled ref="mvRecordHoursTask" method="flashMv" cron="55 */3 * * * ?"/>
            <task:scheduled ref="mvRecordDaysTask" method="flashMv" cron="59 */3 * * * ?"/>


            <task:scheduled ref="mvOrgObjectTimeAmountTask" method="calculateSql4DimTime" cron="2 */4 * * * ?"/>
            <task:scheduled ref="mvOrgObjectTimeAmountYearsTask" method="calculateSql4DimTime" cron="45 */5 * * * ?"/>
            <task:scheduled ref="mvOrgObjectTimeAmountQuartersTask" method="calculateSql4DimTime" cron="58 */5 * * * ?"/>
            <task:scheduled ref="mvOrgObjectTimeAmountMonthsTask" method="calculateSql4DimTime" cron="17 */5 * * * ?"/>
            <task:scheduled ref="mvOrgObjectTimeAmountWeeksTask" method="calculateSql4DimTime" cron="22 */5 * * * ?"/>
            <task:scheduled ref="mvOrgObjectTimeAmountDaysTask" method="calculateSql4DimTime" cron="27 */4 * * * ?"/>
            <task:scheduled ref="mvOrgObjectTimeAmountHoursTask" method="calculateSql4DimTime" cron="32 */4 * * * ?"/>

            <task:scheduled ref="dwdDimTimeHourTask" method="flashMv" cron="0 0 0 1 * ?" />
            <task:scheduled ref="dwdDimTimeDayTask" method="flashMv" cron="0 0 0 1 * ?" />
            <task:scheduled ref="dwdDimTimeWeekTask" method="flashMv" cron="0 0 0 1 * ?" />
            <task:scheduled ref="dwdDimTimeMonthTask" method="flashMv" cron="0 0 0 1 * ?" />
            <task:scheduled ref="dwdDimTimeQuarterTask" method="flashMv" cron="0 0 0 1 * ?" />
            <task:scheduled ref="dwdDimTimeYearTask" method="flashMv" cron="0 0 0 1 * ?" />

            <task:scheduled ref="mvDbTypeAmountTask" method="flashMv" cron="4 */3 * * * ?"/>
            <task:scheduled ref="mvSqlExecuteAmountTask" method="flashMv" cron="9 */3 * * * ?"/>
            <task:scheduled ref="mvAllAuditAmountTask" method="flashMv" cron="12 */3 * * * ?"/>
            <task:scheduled ref="mvSqlExecuteErrorAmountTask" method="flashMv" cron="14 */3 * * * ?"/>
            <task:scheduled ref="mvTodaySqlExecuteAmountTask" method="flashMv" cron="19 */3 * * * ?"/>
            <task:scheduled ref="mvMonthSqlExecuteAmountTask" method="flashMv" cron="24 */3 * * * ?"/>
            <task:scheduled ref="mvTodaySqlOperateAmountTask" method="flashMv" cron="29 */3 * * * ?"/>
            <task:scheduled ref="mvMonthSqlOperateAmountTask" method="flashMv" cron="34 */3 * * * ?"/>
            <task:scheduled ref="mvLastDaySqlExecuteAmountTask" method="flashMv" cron="17 */3 * * * ?"/>
            <task:scheduled ref="mvLastDayOperateAmountTask" method="flashMv" cron="22 */3 * * * ?"/>
            <task:scheduled ref="mvLastMonthOperateAmountTask" method="flashMv" cron="27 */3 * * * ?"/>
            <task:scheduled ref="mvLastMonthSqlExecuteAmountTask" method="flashMv" cron="32 */3 * * * ?"/>
            <task:scheduled ref="mvTodaySqlExecuteErrorAmountTask" method="flashMv" cron="39 */3 * * * ?"/>
            <task:scheduled ref="mvMonthSqlExecuteErrorAmountTask" method="flashMv" cron="42 */3 * * * ?"/>
            <task:scheduled ref="mvDbExecuteAvgHoursTask" method="flashMv" cron="44 */3 * * * ?"/>
            <task:scheduled ref="mvMonthHighRiskSqlAmountTask" method="flashMv" cron="47 */3 * * * ?"/>
            <task:scheduled ref="mvTodayHighRiskSqlAmountTask" method="flashMv" cron="52 */3 * * * ?"/>
            <task:scheduled ref="mvMonthOverPermAmountTask" method="flashMv" cron="57 */3 * * * ?"/>
            <task:scheduled ref="mvDayOverPermAmountTask" method="flashMv" cron="59 */3 * * * ?"/>
            <task:scheduled ref="mvDbExecuteAvgDaysTask" method="flashMv" cron="49 */3 * * * ?"/>
            <task:scheduled ref="mvDbExecuteAvgMonthsTask" method="flashMv" cron="54 */3 * * * ?"/>

            <task:scheduled ref="dwsExtrat" method="calculateSql" cron="0 */1 * * * ?"/>
            <task:scheduled ref="dwsOperate" method="calculateSql" cron="0 */1 * * * ?"/>
            <task:scheduled ref="dwsAuth" method="calculateSql" cron="0 */1 * * * ?"/>
        </task:scheduled-tasks>
    </beans>
  sql.properties: |
    connection.url=jdbc:clickhouse://cloudquery-clickhouse:8123/default?rewriteBatchedStatements=true&use_server_time_zone=Asia/Shanghai&use_time_zone=Asia/Shanghai
    connection.user=admin
    connection.password=aIzFD0oEUa


    prop.insertExtratSql=insert into default.dwd_fact_audit_record(id, created_time, begin_time, end_time, user_id, user_name, client_ip, target_type, business_type, operate_type, entry_point, detail, result_flag, error_msg, db_type, server_ip, port, client_agent, db_edition, db_name, table_name, affect_rows, execute_cost, session_id, explain, operate_target, sql_parse_flag, extrat_flag, check_permission_id, original_sql, connection_id) select generateUUIDv4() as id, log_create_time  as created_time, execute_begin    as begin_time, execute_end      as end_time, executor         as user_id, executor_name    as user_name, client_ip, 'CQ_EXTRAT'      as target_type, 'EXTRAT_DB'      as business_type, sql_type         as operate_type, connection_name  as entry_point, execute_sql      as detail, result_flag, error_msg, log_type         as db_type, server_ip, port, client_agent, db_edition, db_name, table_name, affect_rows, execute_cost, session_id, explain, resource_id, sql_parse_flag, extrat_flag, check_permission_id, original_sql, connection_id from default.ods_extrat_audit_record where log_create_time < ? and log_create_time >= (select max(last_time) from default.calculate_time where type = 'EXECUTE');
    prop.deleteExtratSql=ALTER TABLE default.dwd_fact_audit_record DELETE where created_time < ? and created_time >= (select max(last_time) from default.calculate_time where type = 'EXECUTE');
    prop.insertOperateSql=insert into default.dwd_fact_audit_record(id, created_time, begin_time, end_time, user_id, user_name, client_ip, target_type, business_type, operate_type, entry_point, operate_target, detail, result_flag, error_msg, session_id) select generateUUIDv4() as id, end_time as created_time, begin_time, end_time, user_id, user_name, client_ip, 'CQ_SYSTEM' as target_type, business_type, operate_type, operate_entry_point as entry_point, operate_target, detail, result_flag, if(result_flag, ' ',detail) as error_msg, session_id from default.ods_audit_operate_log where end_time < ? and end_time >= (select max(last_time) from default.calculate_time where type = 'OPERATE');
    prop.deleteOperateSql=ALTER TABLE default.dwd_fact_audit_record DELETE where end_time < ? and end_time >= (select max(last_time) from default.calculate_time where type = 'OPERATE');
    prop.insertAuthSql= insert into default.dwd_fact_authorize_record select generateUUIDv4()        as id, t2.created_at           as created_time, t2.user_id              as auth_user_id, t2.affect_user_id       as authed_user_id, t2.operation_type       as auth_type, t2.operation_type       as auth_operate, t2.affect_role_id       as authed_role_id, t2.affect_permission_id as authed_permission_id, t1.object               as authed_resource_id, t1.operation            as authed_operation, ''                      as detail, t2.comment              as comment, t2.session_id           as session_id, t2.affect_flow_id       as affect_flow_id, t2.client_ip from (select a.created_at                                                             as created_at, a.user_id                                                                as user_id, if(a.affect_user_id is not null, a.affect_user_id, ur.user_id)           as affect_user_id, a.operation_type                                                         as operation_type, a.affect_role_id                                                         as affect_role_id, if(a.affect_permission_id != 0, a.affect_permission_id, r.permission_id) as affect_permission_id, a.comment                                                                as comment, a.session_id                                                             as session_id, if(a.affect_flow_id = 0, null, a.affect_user_id)                         as affect_flow_id, a.client_ip                                                              as client_ip from ods_auth_operate_log a left join dwd_dim_role_permission_relationship r on a.affect_role_id = r.role_id and r.is_deleted = false and (a.operation_type = 'ASSIGN_USER_TO_ROLE' or a.operation_type = 'DEASSIGN_USER_TO_ROLE') left join dwd_dim_user_role_relationship ur on a.affect_role_id = ur.role_id and ur.is_deleted = false and (a.operation_type = 'GRANT_PERMISSION_TO_ROLE' or a.operation_type = 'REVOKE_PERMISSION_TO_ROLE') where a.created_at < ? and a.created_at >= (select max(last_time) from default.calculate_time where type = 'AUTH') ) t2 left join dwd_dim_permission t1 on t1.id = t2.affect_permission_id;
    prop.deleteAuthSql=ALTER TABLE default.dwd_fact_authorize_record DELETE where create_time < ? and create_time >= (select max(last_time) from default.calculate_time where type = 'AUTH');
    prop.insertAuthenticationSql=insert into default.dwd_fact_authentication_record select * from ods_cq_user_authentication_log where created_at < ? and created_at >= (select max(last_time) from default.calculate_time where type = 'AUTHENTICATION');
    prop.deleteAuthenticationSql=ALTER TABLE default.dwd_fact_authentication_record DELETE where created_at < ? and created_at >= (select max(last_time) from default.calculate_time where type = 'AUTHENTICATION');
    prop.insertUserSql=insert into default.dwd_dim_user select * from ods_cq_user where updated_at < ? and updated_at >= (select max(last_time) from default.calculate_time where type = 'USER')
    prop.deleteUserSql=ALTER TABLE default.dwd_dim_user DELETE WHERE id in (select u.id from ods_cq_user u where updated_at < ? and updated_at >= (select max(last_time) from default.calculate_time where type = 'USER'))
    prop.insertOrgSql=insert into default.dwd_dim_org select * from ods_cq_org where updated_at < ? and updated_at >= (select max(last_time) from default.calculate_time where type = 'DEPT')
    prop.deleteOrgSql=ALTER TABLE default.dwd_dim_org DELETE WHERE id in (select u.id from ods_cq_org u where updated_at < ? and updated_at >= (select max(last_time) from default.calculate_time where type = 'DEPT'))
    prop.insertPermissionSql=insert into default.dwd_dim_permission select * from ods_cq_permission where updated_at < ? and updated_at >= (select max(last_time) from default.calculate_time where type = 'PERMISSION')
    prop.deletePermissionSql=ALTER TABLE default.dwd_dim_permission DELETE WHERE id in (select id from ods_cq_permission where updated_at < ? and updated_at >= (select max(last_time) from default.calculate_time where type = 'PERMISSION'))
    prop.insertRoleSql=insert into default.dwd_dim_role select * from ods_cq_role where updated_at < ? and updated_at >= (select max(last_time) from default.calculate_time where type = 'ROLE')
    prop.deleteRoleSql=ALTER TABLE default.dwd_dim_role DELETE WHERE id in (select id from ods_cq_role where updated_at < ? and updated_at >= (select max(last_time) from default.calculate_time where type = 'ROLE'))
    prop.insertNodeSql=insert into default.dwd_dim_data_dict_node_info select * from ods_data_dict_node_info where updated < ? and updated >= (select max(last_time) from default.calculate_time where type = 'NODE')
    prop.deleteNodeSql=ALTER TABLE default.dwd_dim_data_dict_node_info DELETE WHERE id in (select id from ods_data_dict_node_info where updated < ? and updated >= (select max(last_time) from default.calculate_time where type = 'NODE'))
    prop.insertConnectionSql=insert into default.dwd_dim_user_connections select * from ods_cq_user_connections where order_date < ? and order_date >= (select max(last_time) from default.calculate_time where type = 'CONNECTION')
    prop.deleteConnectionSql=ALTER TABLE default.dwd_dim_user_connections DELETE WHERE connection_id in (select connection_id from ods_cq_user_connections where order_date < ? and order_date >= (select max(last_time) from default.calculate_time where type = 'CONNECTION'))
    prop.insertRolePermissionSql=insert into default.dwd_dim_role_permission_relationship select * from ods_role_permission_relationship where updated_at < ? and updated_at >= (select max(last_time) from default.calculate_time where type = 'ROLE_PERMISSION')
    prop.deleteRolePermissionSql=ALTER TABLE default.dwd_dim_role_permission_relationship DELETE WHERE id in (select id from ods_role_permission_relationship where updated_at < ? and updated_at >= (select max(last_time) from default.calculate_time where type = 'ROLE_PERMISSION'))
    prop.insertUserRoleSql=insert into default.dwd_dim_user_role_relationship select * from ods_user_role_relationship where updated_at < ? and updated_at >= (select max(last_time) from default.calculate_time where type = 'USER_ROLE')
    prop.deleteUserRoleSql=ALTER TABLE default.dwd_dim_user_role_relationship DELETE WHERE id in (select id from ods_user_role_relationship where updated_at < ? and updated_at >= (select max(last_time) from default.calculate_time where type = 'USER_ROLE'))


    prop.mvCurrentUserAmount=insert into default.mv_current_user_amount SELECT count(*) AS amount FROM (SELECT 1 FROM dws_audit a WHERE a.begin_time > date_trunc('day', now()) AND a.operate_type = 'LOGIN' AND a.result_flag = 1 AND a.target_type = 'CQ_SYSTEM' GROUP BY a.user_id) tt;
    prop.mvAuditRecordHours=insert into default.mv_audit_record_hours SELECT c.years, c.months, c.days, c.hours, c.db_type, sum( CASE WHEN c.db_type IS NOT NULL THEN 1 ELSE 0 END) AS amount FROM ( SELECT date_trunc('year', t1.created_time)  as years, date_trunc('month', t1.created_time) as months, date_trunc('day', t1.created_time) as days, date_trunc('hour', t1.created_time)  as hours, t1.db_type FROM dws_audit t1 WHERE date_trunc('hour', t1.begin_time) < (date_trunc('day', now()) + interval 1 day) AND t1.target_type = 'CQ_EXTRAT') c GROUP BY c.years, c.months, c.days, c.hours, c.db_type;
    prop.mvAuditRecordDays=insert into default.mv_audit_record_days SELECT c.years, c.months, c.days, c.log_type, sum(c.amount) AS amount FROM mv_audit_record_hours c GROUP BY c.years, c.months, c.days, c.log_type;
    prop.mvAuditRecordMonths=insert into default.mv_audit_record_months SELECT c.years, c.months, c.log_type, sum(c.amount) AS amount FROM mv_audit_record_days c GROUP BY c.years, c.months, c.log_type;

    prop.mvUserAmount=insert into default.mv_user_amount SELECT c_1.years, c_1.months, c_1.days, c_1.hours, c_1.user_id, count(1) AS amount, c_1.quarters, c_1.weeks FROM (SELECT date_trunc('year', begin_time)    as years, date_trunc('month', begin_time)   as months, date_trunc('day', begin_time)     as days, date_trunc('hour', begin_time)    as hours, date_trunc('quarter', begin_time) as quarters, date_trunc('week', begin_time)    as weeks, user_id FROM dws_audit t1 WHERE date_trunc('hour', begin_time) < (date_trunc('day', now()) + interval 1 day) AND t1.user_id IS NOT NULL AND user_id in (select dwd_dim_user.user_id from dwd_dim_user where is_deleted = false) ) c_1 GROUP BY c_1.years, c_1.months, c_1.days, c_1.hours, c_1.user_id, c_1.quarters, c_1.weeks;
    prop.mvUserAmountHours=insert into default.mv_user_amount_hours SELECT cc.years, cc.months, cc.days, cc.hours, sum(amount) AS amount FROM ( SELECT cc_1.years, cc_1.months, cc_1.days, cc_1.hours, cc_1.user_id, sum(cc_1.amount) AS amount FROM mv_user_amount cc_1 GROUP BY cc_1.years, cc_1.months, cc_1.days, cc_1.hours, cc_1.user_id) cc GROUP BY cc.years, cc.months, cc.days, cc.hours;
    prop.mvUserAmountDays=insert into default.mv_user_amount_days SELECT cc.years, cc.months, cc.days, sum(amount) AS amount FROM ( SELECT cc_1.years, cc_1.months, cc_1.days, cc_1.user_id, sum(cc_1.amount) AS amount FROM mv_user_amount cc_1 GROUP BY cc_1.years, cc_1.months, cc_1.days, cc_1.user_id) cc GROUP BY cc.years, cc.months, cc.days;
    prop.mvUserAmountMonths=insert into default.mv_user_amount_months SELECT cc.years, cc.months, sum(amount) AS amount FROM ( SELECT cc_1.years, cc_1.months, cc_1.user_id, sum(cc_1.amount) AS amount FROM mv_user_amount cc_1 GROUP BY cc_1.years, cc_1.months, cc_1.user_id) cc GROUP BY cc.years, cc.months;
    prop.mvUserAmountQuaters=insert into default.mv_user_amount_quarters SELECT cc.quarters, sum(amount) AS amount FROM (SELECT cc_1.quarters, sum(cc_1.amount) AS amount FROM mv_user_amount cc_1 GROUP BY cc_1.quarters, cc_1.user_id) cc GROUP BY cc.quarters;
    prop.mvUserAmountWeeks=insert into default.mv_user_amount_weeks SELECT cc.weeks, sum(amount) AS amount FROM (SELECT cc_1.weeks, sum(cc_1.amount) AS amount FROM mv_user_amount cc_1 GROUP BY cc_1.weeks, cc_1.user_id) cc GROUP BY cc.weeks;
    prop.mvUserAmountYears=insert into default.mv_user_amount_years SELECT cc.years, sum(amount) AS amount FROM (SELECT cc_1.years, sum(cc_1.amount) AS amount FROM mv_user_amount cc_1 GROUP BY cc_1.years, cc_1.user_id) cc GROUP BY cc.years;

    prop.mvDbTypeAmount=insert into default.mv_db_type_amount SELECT a.db_type AS db_type, count(*) AS amount FROM dws_audit a where a.target_type = 'CQ_EXTRAT' GROUP BY a.db_type;
    prop.mvSqlExecuteAmount=insert into default.mv_sql_execute_amount SELECT count(*) AS amount FROM dws_audit where target_type = 'CQ_EXTRAT';
    prop.mvAllAuditAmount=insert into default.mv_all_audit_amount SELECT count(*) AS amount FROM dws_audit;
    prop.mvSqlExecuteErrorAmount=insert into default.mv_sql_execute_error_amount SELECT count(*) AS amount FROM dws_audit a WHERE a.result_flag = 0 AND a.target_type = 'CQ_EXTRAT';
    prop.mvTodaySqlExecuteAmount=insert into mv_today_sql_execute_amount SELECT count(*) AS amount FROM dws_audit f where target_type = 'CQ_EXTRAT' and f.created_time > date_trunc('day', now());
    prop.mvMonthSqlExecuteAmount=insert into mv_month_sql_execute_amount SELECT count(*) AS amount FROM dws_audit f where target_type = 'CQ_EXTRAT' and f.created_time > date_trunc('month', now());
    prop.mvTodaySqlOperateAmount=insert into mv_today_sql_operate_amount SELECT count(*) AS amount FROM dws_audit f where target_type = 'CQ_SYSTEM' and f.created_time > date_trunc('day', now());
    prop.mvMonthSqlOperateAmount=insert into mv_month_sql_operate_amount SELECT count(*) AS amount FROM dws_audit f where target_type = 'CQ_SYSTEM' and f.created_time > date_trunc('month', now());
    prop.mvTodaySqlExecuteErrorAmount=insert into mv_today_sql_execute_error_amount SELECT count(*) AS amount FROM dws_audit a WHERE a.result_flag = 0 AND a.target_type = 'CQ_EXTRAT' and a.created_time > date_trunc('day', now());

    prop.mvMonthSqlExecuteErrorAmount=insert into mv_month_sql_execute_error_amount SELECT count(*) AS amount FROM dws_audit a WHERE a.result_flag = 0 AND a.target_type = 'CQ_EXTRAT' and a.created_time > date_trunc('month', now());
    prop.mvLastDaySqlExecuteAmount=insert into mv_last_day_sql_execute_amount SELECT count(*) AS amount FROM dws_audit f where target_type = 'CQ_EXTRAT' and f.created_time > date_trunc('day', now() - INTERVAL 1 day) and f.created_time < date_trunc('day', now());
    prop.mvLastDayOperateAmount=insert into mv_last_day_operate_amount SELECT count(*) AS amount FROM dws_audit f where target_type = 'CQ_SYSTEM' and f.created_time > date_trunc('day', now() - INTERVAL 1 day) and f.created_time < date_trunc('day', now());
    prop.mvLastMonthSqlExecuteAmount=insert into mv_last_month_sql_execute_amount SELECT count(*) AS amount FROM dws_audit f where target_type = 'CQ_EXTRAT' and f.created_time > date_trunc('month', now() - INTERVAL 1 month) and f.created_time < date_trunc('month', now());
    prop.mvLastMonthOperateAmount=insert into mv_last_month_operate_amount SELECT count(*) AS amount FROM dws_audit f where target_type = 'CQ_SYSTEM' and f.created_time > date_trunc('month', now() - INTERVAL 1 month) and f.created_time < date_trunc('month', now());
    prop.mvMonthHighRiskSqlAmount=insert into mv_month_high_risk_sql_amount select count(*) from dws_audit where target_type = 'CQ_EXTRAT' and (operate_type like '%DROP%' or operate_type like '%DELETE%' or operate_type like '%GRANT%') and created_time > date_trunc('month', now());
    prop.mvTodayHighRiskSqlAmount=insert into mv_today_high_risk_sql_amount select count(*) from dws_audit where target_type = 'CQ_EXTRAT' and (operate_type like '%DROP%' or operate_type like '%DELETE%' or operate_type like '%GRANT%') and created_time > date_trunc('day', now())
    prop.mvMonthOverPermAmount=insert into mv_month_over_perm_amount select count(*) from dws_audit where (error_msg like '%没有操作权限%' or error_msg like '%请提权处理%') and created_time > date_trunc('month', now());
    prop.mvDayOverPermAmount=insert into mv_today_over_perm_amount select count(*) from dws_audit where (error_msg like '%没有操作权限%' or error_msg like '%请提权处理%') and created_time > date_trunc('day', now());

    prop.mvRecordHours=insert into default.mv_record_hours SELECT c.years, c.months, c.days, c.hours, sum(1) AS amount FROM (SELECT date_trunc('year', t1.created_time)  as years, date_trunc('month', t1.created_time) as months, date_trunc('day', t1.created_time)   as days, date_trunc('hour', t1.created_time)  as hours, t1.db_type FROM dws_audit t1 WHERE date_trunc('hour', t1.begin_time) < (date_trunc('day', now()) + interval 1 day)) c GROUP BY c.years, c.months, c.days, c.hours;
    prop.mvRecordDays=insert into default.mv_record_days SELECT c.years, c.months, c.days, sum(c.amount) AS amount FROM mv_record_hours c GROUP BY c.years, c.months, c.days;

    prop.mvUserFlowAmount=insert into default.mv_user_flow_amount select t2.years, t2.months, t2.days, sum(pass) as pass_amount, sum(refuse) as refuse_amount from (SELECT date_trunc('year', begin_time)       as years, date_trunc('month', begin_time)      as months, date_trunc('day', begin_time)        as days, if(t1.operate_type = 'PASS', 1, 0)   as pass, if(t1.operate_type = 'REFUSE', 1, 0) as refuse FROM dws_audit t1 WHERE date_trunc('day', begin_time) < (date_trunc('month', now()) + interval 1 month)) t2 group by years, months, days

    prop.mvDbExecuteAvgHours= insert into default.mv_db_execute_avg_hours SELECT t1.years, t1.months, t1.days, t1.hours, sum(if(t1.execute_cost IS NOT NULL, t1.execute_cost, 0))                   AS execute_cost, round(sum(if(t1.execute_cost IS NOT NULL, t1.execute_cost, 0)) / count(*)) AS execute_avg, count(*) AS execute_amount, t1.connection_name, t1.db_name FROM (SELECT date_trunc('year', c.created_time) AS years, date_trunc('month', c.created_time) AS months, date_trunc('day', c.created_time) AS days, date_trunc('hour', c.created_time) AS hours, c.execute_cost, c.entry_point AS connection_name, c.db_name AS db_name FROM dws_audit c WHERE date_trunc('hour', c.created_time) < (date_trunc('day', now()) + interval 1 day) AND c.port IS NOT NULL AND c.target_type = 'CQ_EXTRAT') t1 GROUP BY t1.years, t1.months, t1.days, t1.hours, t1.connection_name, t1.db_name;
    prop.mvDbExecuteAvgDays=insert into default.mv_db_execute_avg_days SELECT c.years, c.months, c.days, sum(c.execute_cost) AS execute_cost, sum(c.execute_amount) AS execute_amount, round(sum(c.execute_cost) / sum(c.execute_amount)) AS execute_avg, c.connection_name, c.db_name FROM mv_db_execute_avg_hours c GROUP BY c.years, c.months, c.days, c.connection_name, c.db_name;
    prop.mvDbExecuteAvgMonths=insert into default.mv_db_execute_avg_months SELECT c.years, c.months, sum(c.execute_cost) AS execute_cost, sum(c.execute_amount) AS execute_amount, round(sum(c.execute_cost) / sum(c.execute_amount)) AS execute_avg, c.connection_name, c.db_name FROM mv_db_execute_avg_days c GROUP BY c.years, c.months, c.connection_name, c.db_name;

    prop.dwsExtrat=insert into default.dws_audit select generateUUIDv4() as     id, far.created_time        created_time, far.begin_time          begin_time, far.end_time            end_time, far.user_id             user_id, far.user_name           user_name, far.client_ip           client_ip, far.target_type         target_type, far.business_type       business_type, far.operate_type        operate_type, far.entry_point         entry_point, far.operate_target      operate_target, far.detail              detail, far.result_flag         result_flag, far.error_msg           error_msg, far.connection_id       connection_id, far.db_type             db_type, far.server_ip           server_ip, far.port                port, far.client_agent        client_agent, far.db_edition          db_edition, far.db_name             db_name, far.table_name          table_name, ''               as     node_path, far.affect_rows         affect_rows, far.execute_cost        execute_cost, far.session_id          session_id, far.explain             explain, far.sql_parse_flag      sql_parse_flag, extrat_flag, far.check_permission_id check_permission_id, u.name                  dept_name, far.original_sql        original_sql, u.dept_id               dept_id from (select * from dwd_fact_audit_record f where f.created_time < ? and f.created_time >= (select max(last_time) from default.calculate_time where type = 'DWS_EXECUTE') and f.target_type = 'CQ_EXTRAT') far left join (select user.user_id, o.name as name, o.id as dept_id from dwd_dim_user user inner join dwd_dim_org o on user.department_id = o.id and user.is_deleted = false) u on u.user_id = far.user_id;
    prop.deleteDwsExtrat=ALTER TABLE default.dws_audit DELETE where created_time < ? and created_time >= (select max(last_time) from default.calculate_time where type = 'DWS_EXECUTE') and target_type = 'CQ_EXTRAT'
    prop.dwsOperate=insert into default.dws_audit select generateUUIDv4() as     id, far.created_time        created_time, far.begin_time          begin_time, far.end_time            end_time, far.user_id             user_id, far.user_name           user_name, far.client_ip           client_ip, far.target_type         target_type, far.business_type       business_type, far.operate_type        operate_type, far.entry_point         entry_point, far.operate_target      operate_target, far.detail              detail, far.result_flag         result_flag, far.error_msg           error_msg, far.connection_id       connection_id, far.db_type             db_type, far.server_ip           server_ip, far.port                port, far.client_agent        client_agent, far.db_edition          db_edition, far.db_name             db_name, far.table_name          table_name, ''               as     node_path, far.affect_rows         affect_rows, far.execute_cost        execute_cost, far.session_id          session_id, far.explain             explain, far.sql_parse_flag      sql_parse_flag, extrat_flag, far.check_permission_id check_permission_id, u.name                  dept_name, far.original_sql        original_sql, u.dept_id               dept_id from (select * from dwd_fact_audit_record f where f.created_time < ? and f.created_time >= (select max(last_time) from default.calculate_time where type = 'DWS_OPERATE') and f.target_type = 'CQ_SYSTEM') far left join (select user.user_id, o.name as name, o.id as dept_id from dwd_dim_user user inner join dwd_dim_org o on user.department_id = o.id and user.is_deleted = false) u on u.user_id = far.user_id;
    prop.deleteDwsOperate=ALTER TABLE default.dws_audit DELETE where created_time < ? and created_time >= (select max(last_time) from default.calculate_time where type = 'DWS_OPERATE') and target_type = 'CQ_SYSTEM'
    prop.dwsAuth=insert into default.dws_authorize select generateUUIDv4() as id, a.create_time, a.auth_user_id, u1.name, a.authed_user_id, u2.name, a.auth_type, a.auth_operate, a.authed_role_id, r.name, a.authed_permission_id, p.name, a.authed_resource_id, p.connection_id, p.data_source_name, p.conn_name, ''               as authed_db_name, ''               as authed_table_name, ''               as authed_column_name, a.authed_resource_id, a.authed_operation, a.detail, a.comment, a.session_id, a.affect_flow_id, a.client_ip from ( SELECT * FROM dwd_fact_authorize_record where create_time < ? and create_time >= (select max(last_time) from default.calculate_time where type = 'DWS_AUTH')) a left join dwd_dim_user u1 on a.auth_user_id = u1.user_id and u1.is_deleted = false left join dwd_dim_user u2 on a.authed_user_id = u2.user_id and u2.is_deleted = false left join dwd_dim_role r on a.authed_role_id = r.id left join (select p.id, p.name, c.connection_id as connection_id, c.data_source_name, c.conn_name from dwd_dim_permission p left join dwd_dim_user_connections c on p.connection_id = c.connection_id) p on a.authed_permission_id = p.id;
    prop.deleteDwsAuth=ALTER TABLE default.dws_authorize DELETE where create_time < ? and create_time >= (select max(last_time) from default.calculate_time where type = 'DWS_AUTH');

    prop.mvOrgObjectTimeAmount=insert into default.mv_org_object_time_amount_avg SELECT c_1.user_id, c_1.connection_id, c_1.db_type, c_1.db_name, c_1.table_name, c_1.operate_type, c_1.dept_id, c_1.business_type, c_1.years, c_1.quarters, c_1.months, c_1.weeks, c_1.days, c_1.hours, count(1)                            AS amount, round(sum(execute_cost) / count(*)) AS execute_avg FROM (SELECT t1.user_id                           as user_id, t1.connection_id                     as connection_id, t1.db_type                           as db_type, t1.db_name                           as db_name, t1.table_name                        as table_name, t1.operate_type                      as operate_type, t1.dept_id                           as dept_id, t1.business_type                     as business_type, t1.execute_cost                      as execute_cost, date_trunc('year', t1.begin_time)    as years, date_trunc('quarter', t1.begin_time) as quarters, date_trunc('month', t1.begin_time)   as months, date_trunc('week', t1.begin_time)    as weeks, date_trunc('day', t1.begin_time)     as days, date_trunc('hour', t1.begin_time)    as hours FROM dws_audit t1 WHERE date_trunc('hour', t1.begin_time) < (date_trunc('hour', toDateTime(?)) + interval 1 hour) AND date_trunc('hour', t1.begin_time) >= date_trunc('hour', toDateTime(?)) AND connection_id <= ? AND connection_id >= ?) c_1 GROUP BY c_1.user_id, c_1.connection_id, c_1.db_type, c_1.db_name, c_1.table_name, c_1.operate_type, c_1.dept_id, c_1.business_type, c_1.years, c_1.months, c_1.days, c_1.hours, c_1.quarters, c_1.weeks;
    prop.deleteMvOrgObjectTimeAmount=ALTER TABLE default.mv_org_object_time_amount_avg DELETE WHERE hours in (SELECT hours FROM default.mv_org_object_time_amount_avg WHERE date_trunc('hour', hours)  < (date_trunc('hour', toDateTime(?)) + interval 1 hour ) AND date_trunc('hour', hours)  >= date_trunc('hour', toDateTime(?)));
    prop.splitMvOrgObjectTimeAmount=SELECT MAX(connection_id) as max, MIN(connection_id) as min FROM dws_audit WHERE date_trunc('hour', begin_time) < (date_trunc('hour', toDateTime(?)) + interval 1 hour) AND date_trunc('hour', begin_time) >= date_trunc('hour', toDateTime(?))

    prop.mvOrgObjectTimeAmountHours=insert into default.mv_org_object_time_amount_avg_hours SELECT c_1.user_id, c_1.connection_id, c_1.db_type, c_1.db_name, c_1.table_name, c_1.operate_type, c_1.dept_id, c_1.business_type, c_1.hours                              as time, sum(c_1.amount), round(sum(c_1.execute_avg) / count(*)) AS execute_avg FROM mv_org_object_time_amount_avg c_1 WHERE c_1.business_type = 'EXTRAT_DB' AND time < (date_trunc('hour', toDateTime(?)) + interval 1 hour) AND time >= date_trunc('hour', toDateTime(?)) AND connection_id <= ? AND connection_id >= ? GROUP BY c_1.user_id, c_1.connection_id, c_1.db_type, c_1.db_name, c_1.table_name, c_1.operate_type, c_1.dept_id, c_1.business_type, c_1.hours;
    prop.deleteMvOrgObjectTimeAmountHours=ALTER TABLE default.mv_org_object_time_amount_avg_hours DELETE WHERE time in (SELECT time FROM default.mv_org_object_time_amount_avg_hours WHERE time < (date_trunc('hour', toDateTime(?)) + interval 1 hour) AND time >= date_trunc('hour', toDateTime(?)));
    prop.splitMvOrgObjectTimeAmountHours=SELECT MAX(connection_id) as max, MIN(connection_id) as min FROM mv_org_object_time_amount_avg WHERE business_type = 'EXTRAT_DB' AND hours < (date_trunc('hour', toDateTime(?)) + interval 1 hour) AND hours >= date_trunc('hour', toDateTime(?))

    prop.mvOrgObjectTimeAmountDays=insert into default.mv_org_object_time_amount_avg_days SELECT c_1.user_id, c_1.connection_id, c_1.db_type, c_1.db_name, c_1.table_name, c_1.operate_type, c_1.dept_id, c_1.business_type, c_1.days                               as time, sum(c_1.amount), round(sum(c_1.execute_avg) / count(*)) AS execute_avg FROM mv_org_object_time_amount_avg c_1 WHERE c_1.business_type = 'EXTRAT_DB' AND time < (date_trunc('hour', toDateTime(?)) + interval 1 hour) AND time >= date_trunc('day', toDateTime(?)) AND connection_id <= ? AND connection_id >= ? GROUP BY c_1.user_id, c_1.connection_id, c_1.db_type, c_1.db_name, c_1.table_name, c_1.operate_type, c_1.dept_id, c_1.business_type, c_1.days;
    prop.deleteMvOrgObjectTimeAmountDays=ALTER TABLE default.mv_org_object_time_amount_avg_days DELETE WHERE time in (SELECT time FROM default.mv_org_object_time_amount_avg_days WHERE time < (date_trunc('hour', toDateTime(?)) + interval 1 hour) AND time >= date_trunc('day', toDateTime(?)));
    prop.splitMvOrgObjectTimeAmountDays=SELECT MAX(connection_id) as max, MIN(connection_id) as min FROM mv_org_object_time_amount_avg WHERE business_type = 'EXTRAT_DB' AND days < (date_trunc('hour', toDateTime(?)) + interval 1 hour) AND days >= date_trunc('day', toDateTime(?))

    prop.mvOrgObjectTimeAmountWeeks=insert into default.mv_org_object_time_amount_avg_weeks SELECT c_1.user_id, c_1.connection_id, c_1.db_type, c_1.db_name, c_1.table_name, c_1.operate_type, c_1.dept_id, c_1.business_type, c_1.weeks                              as time, sum(c_1.amount), round(sum(c_1.execute_avg) / count(*)) AS execute_avg FROM mv_org_object_time_amount_avg c_1 WHERE c_1.business_type = 'EXTRAT_DB' AND time < (date_trunc('hour', toDateTime(?)) + interval 1 hour) AND time >= date_trunc('week', toDateTime(?)) AND connection_id <= ? AND connection_id >= ? GROUP BY c_1.user_id, c_1.connection_id, c_1.db_type, c_1.db_name, c_1.table_name, c_1.operate_type, c_1.dept_id, c_1.business_type, c_1.weeks;
    prop.deleteMvOrgObjectTimeAmountWeeks=ALTER TABLE default.mv_org_object_time_amount_avg_weeks DELETE WHERE time in (SELECT time FROM default.mv_org_object_time_amount_avg_weeks WHERE time < (date_trunc('hour', toDateTime(?)) + interval 1 hour) AND time >= date_trunc('week', toDateTime(?)));
    prop.splitMvOrgObjectTimeAmountWeeks=SELECT MAX(connection_id) as max, MIN(connection_id) as min FROM mv_org_object_time_amount_avg WHERE business_type = 'EXTRAT_DB' AND weeks < (date_trunc('hour', toDateTime(?)) + interval 1 hour) AND weeks >= date_trunc('week', toDateTime(?))

    prop.mvOrgObjectTimeAmountMonths=insert into default.mv_org_object_time_amount_avg_months SELECT c_1.user_id, c_1.connection_id, c_1.db_type, c_1.db_name, c_1.table_name, c_1.operate_type, c_1.dept_id, c_1.business_type, c_1.months                             as time, sum(c_1.amount), round(sum(c_1.execute_avg) / count(*)) AS execute_avg FROM mv_org_object_time_amount_avg c_1 WHERE c_1.business_type = 'EXTRAT_DB' AND time < (date_trunc('hour', toDateTime(?)) + interval 1 hour) AND time >= date_trunc('month', toDateTime(?)) AND connection_id <= ? AND connection_id >= ? GROUP BY c_1.user_id, c_1.connection_id, c_1.db_type, c_1.db_name, c_1.table_name, c_1.operate_type, c_1.dept_id, c_1.business_type, c_1.months;
    prop.deleteMvOrgObjectTimeAmountMonths=ALTER TABLE default.mv_org_object_time_amount_avg_months DELETE WHERE time in (SELECT time FROM default.mv_org_object_time_amount_avg_months WHERE time < (date_trunc('hour', toDateTime(?)) + interval 1 hour) AND time >= date_trunc('month', toDateTime(?)));
    prop.splitMvOrgObjectTimeAmountMonths=SELECT MAX(connection_id) as max, MIN(connection_id) as min FROM mv_org_object_time_amount_avg WHERE business_type = 'EXTRAT_DB' AND months < (date_trunc('hour', toDateTime(?)) + interval 1 hour) AND months >= date_trunc('month', toDateTime(?))

    prop.mvOrgObjectTimeAmountQuarters=insert into default.mv_org_object_time_amount_avg_quarters SELECT c_1.user_id, c_1.connection_id, c_1.db_type, c_1.db_name, c_1.table_name, c_1.operate_type, c_1.dept_id, c_1.business_type, c_1.quarters                           as time, sum(c_1.amount), round(sum(c_1.execute_avg) / count(*)) AS execute_avg FROM mv_org_object_time_amount_avg c_1 WHERE c_1.business_type = 'EXTRAT_DB' AND time < (date_trunc('hour', toDateTime(?)) + interval 1 hour) AND time >= date_trunc('quarter', toDateTime(?)) AND connection_id <= ? AND connection_id >= ? GROUP BY c_1.user_id, c_1.connection_id, c_1.db_type, c_1.db_name, c_1.table_name, c_1.operate_type, c_1.dept_id, c_1.business_type, c_1.quarters;
    prop.deleteMvOrgObjectTimeAmountQuarters=ALTER TABLE default.mv_org_object_time_amount_avg_quarters DELETE WHERE time in (SELECT time FROM default.mv_org_object_time_amount_avg_quarters WHERE time < (date_trunc('hour', toDateTime(?)) + interval 1 hour) AND time >= date_trunc('quarter', toDateTime(?)));
    prop.splitMvOrgObjectTimeAmountQuarters=SELECT MAX(connection_id) as max, MIN(connection_id) as min FROM mv_org_object_time_amount_avg WHERE business_type = 'EXTRAT_DB' AND quarters < (date_trunc('hour', toDateTime(?)) + interval 1 hour) AND quarters >= date_trunc('quarter', toDateTime(?))

    prop.mvOrgObjectTimeAmountYears=insert into default.mv_org_object_time_amount_avg_years SELECT c_1.user_id, c_1.connection_id, c_1.db_type, c_1.db_name, c_1.table_name, c_1.operate_type, c_1.dept_id, c_1.business_type, c_1.years                              as time, sum(c_1.amount), round(sum(c_1.execute_avg) / count(*)) AS execute_avg FROM mv_org_object_time_amount_avg c_1 WHERE c_1.business_type = 'EXTRAT_DB' AND time < (date_trunc('hour', toDateTime(?)) + interval 1 hour) AND time >= date_trunc('year', toDateTime(?)) AND connection_id <= ? AND connection_id >= ? GROUP BY c_1.user_id, c_1.connection_id, c_1.db_type, c_1.db_name, c_1.table_name, c_1.operate_type, c_1.dept_id, c_1.business_type, c_1.years;
    prop.deleteMvOrgObjectTimeAmountYears=ALTER TABLE default.mv_org_object_time_amount_avg_years DELETE WHERE time in (SELECT time FROM default.mv_org_object_time_amount_avg_years WHERE time < (date_trunc('hour', toDateTime(?)) + interval 1 hour) AND time >= date_trunc('year', toDateTime(?)));
    prop.splitMvOrgObjectTimeAmountYears=SELECT MAX(connection_id) as max, MIN(connection_id) as min FROM mv_org_object_time_amount_avg WHERE business_type = 'EXTRAT_DB' AND years < (date_trunc('hour', toDateTime(?)) + interval 1 hour) AND years >= date_trunc('year', toDateTime(?))

    prop.dwdDimTimeHour=insert into dwd_dim_time_hour WITH date_trunc('hour', toDateTime('2022-01-01 00:00:00')) AS start, date_trunc('hour', now() + interval 1 year) AS end, arrayMap( x -> toDateTime(addHours(start, x)), range(0, dateDiff('hour', start, end))) AS hours SELECT arrayJoin(hours) AS hour;
    prop.dwdDimTimeDay=insert into dwd_dim_time_day WITH dateTrunc('day', toDateTime('2022-01-01 00:00:00')) AS start, date_trunc('day', now() + interval 1 year) AS end, arrayMap( x -> toDateTime(addDays(start, x)), range(0, dateDiff('day', start, end))) AS days SELECT arrayJoin(days) AS day;
    prop.dwdDimTimeWeek=insert into dwd_dim_time_week WITH date_trunc('week', toDateTime('2022-01-01 00:00:00')) AS start, date_trunc('week', now() + interval 1 year) AS end, arrayMap( x -> toDateTime(addWeeks(start, x)), range(0, dateDiff('week', start, end))) AS weeks SELECT arrayJoin(weeks) AS week;
    prop.dwdDimTimeMonth=insert into dwd_dim_time_month WITH dateTrunc('month', toDateTime('2022-01-01 00:00:00')) AS start, date_trunc('day', now() + interval 1 year) AS end, arrayMap( x -> toDateTime(addMonths(start, x)), range(0, dateDiff('month', start, end))) AS months SELECT arrayJoin(months) AS month;
    prop.dwdDimTimeQuarter=insert into dwd_dim_time_quarter WITH date_trunc('quarter', toDateTime('2022-01-01 00:00:00')) AS start, date_trunc('day', now() + interval 1 year) AS end, arrayMap( x -> toDateTime(addQuarters(start, x)), range(0, dateDiff('quarter', start, end))) AS quarters SELECT arrayJoin(quarters) AS quarter;
    prop.dwdDimTimeYear=insert into dwd_dim_time_year WITH date_trunc('year', toDateTime('2022-01-01 00:00:00')) AS start, date_trunc('year', now() + interval 1 year) AS end, arrayMap( x -> toDateTime(addYears(start, x)), range(0, dateDiff('year', start, end))) AS years SELECT arrayJoin(years) AS year;